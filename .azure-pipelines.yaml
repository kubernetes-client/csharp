jobs:

- job: xamarin_build
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
  - task: MSBuild@1
    displayName: 'NuGet restore'
    inputs:
      solution: '$(Build.SourcesDirectory)/src/KubernetesClient/KubernetesClient.csproj'
      msbuildArguments: '/restore /p:Configuration=Release'

  - task: MSBuild@1
    displayName: 'MSBuild Pack'
    inputs:
      solution: '$(Build.SourcesDirectory)/src/KubernetesClient/KubernetesClient.csproj'
      msbuildArguments: '/t:pack /p:Configuration=Release /p:PackageOutputPath="$(Build.ArtifactStagingDirectory)/nupkg/"'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nupkg/'

- job: windows_build
  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      projects: '**/*.sln'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test'
    inputs:
      command: test
      projects: tests\**\*.csproj
      arguments: /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

  - task: PublishCodeCoverageResults@1
    displayName: 'publish coverage results'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'

  - task: alanwales.resharper-code-analysis.custom-build-task.ResharperCli@1
    displayName: 'Automated code quality checks'
    inputs:
      SolutionOrProjectPath: 'kubernetes-client.sln'
      FailBuildOnCodeIssues: false
    continueOnError: true

  - task: DotNetCoreCLI@2
    displayName: 'dotnet pack'
    inputs:
      command: pack
      packagesToPack: src/KubernetesClient/KubernetesClient.csproj
      packDirectory: '$(Build.ArtifactStagingDirectory)/nupkg'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nupkg'

- job: macos_build
  pool:
    vmImage: 'xcode9-macos10.13'
  steps:
  - script: |
      brew install coreutils
      which realpath
      ./ci.sh
    displayName: 'Build & Test'

  - task: PublishTestResults@1
    displayName: 'Publish Test Results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '$(Build.SourcesDirectory)/tests/**/*.xunit.trx'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    displayName: 'publish coverage results'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/tests/coveragereport/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/tests/coveragereport/'
    condition: succeededOrFailed()

- job: ubuntu_build
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - script: |
      ./install-linux.sh
    displayName: 'Install .NET & set up minikube'

  - script: |
      ./ci.sh
    displayName: 'Build & Test'

  - task: PublishTestResults@1
    displayName: 'Publish Test Results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '$(Build.SourcesDirectory)/tests/**/*.xunit.trx'
    condition: succeededOrFailed()

  - task: PublishCodeCoverageResults@1
    displayName: 'publish coverage results'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/tests/coveragereport/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/tests/coveragereport/'
    condition: succeededOrFailed()
