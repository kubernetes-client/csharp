name: Build and Test

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    name: Dotnet build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
           3.1.x
           5.0.x
           6.0.x             
      # - name: Check Format
      #   # don't check formatting on Windows b/c of CRLF issues.
      #   if: matrix.os == 'ubuntu-latest'
      #   run: dotnet format --severity error --verify-no-changes --exclude ./src/KubernetesClient/generated/
      - name: Build
        run: dotnet build --configuration Release -v detailed
      - name: Test
        run: dotnet test /p:CollectCoverage=true /p:ExcludeByFile=\"**/KubernetesClient/generated/**/*.cs\" /p:CoverletOutputFormat="cobertura"
  
  # Build and test netstandard2.0/2.1 version of library with .NET Core 6.0
  netstandard:
    runs-on: ubuntu-latest
    name: Dotnet build
    strategy:
      matrix:
        netstandard-version: [netstandard2.0, netstandard2.1]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0     
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: |
            5.0.x
            6.0.x
      # Build KubernetesClient with specific netstandard version
      - name: Build libraries
        run: |
          dotnet build -f ${{ matrix.netstandard-version }} --configuration Debug -v minimal ./src/KubernetesClient/KubernetesClient.csproj 
          dotnet build -f netstandard2.0 --configuration Debug -v minimal ./tests/SkipTestLogger/SkipTestLogger.csproj
      # Build KubernetesClient.Tests and E2E.Tests
      - name: Build test projects with ${{ matrix.netstandard-version }} version of KubernetesClient
        run: |
          dotnet build --configuration Debug -v minimal --no-dependencies -p:KubernetesClientVersion="${{ matrix.netstandard-version }}" ./tests/KubernetesClient.Tests/KubernetesClient.Tests.csproj 
          dotnet build --configuration Debug -v minimal --no-dependencies -p:KubernetesClientVersion="${{ matrix.netstandard-version }}" ./tests/E2E.Tests/E2E.Tests.csproj
      # Run compiled KubernetesClient.Tests and E2E.Tests
      - name: Run test projects with ${{ matrix.netstandard-version }} version of KubernetesClient
        run: |
          # Run KubernetesClient.Tests.csproj
          dotnet test ./tests/KubernetesClient.Tests/KubernetesClient.Tests.csproj \
            /p:CollectCoverage=true /p:ExcludeByFile=\"**/KubernetesClient/generated/**/*.cs\" /p:CoverletOutputFormat="cobertura" --no-build /p:KubernetesClientVersion="${{ matrix.netstandard-version }}"
          # Run E2E.Tests.csproj
          dotnet test ./tests/E2E.Tests/E2E.Tests.csproj \
            /p:CollectCoverage=true /p:ExcludeByFile=\"**/KubernetesClient/generated/**/*.cs\" /p:CoverletOutputFormat="cobertura" --no-build /p:KubernetesClientVersion="${{ matrix.netstandard-version }}"
    
  # Test code gen for visual studio compatibility >> https://github.com/kubernetes-client/csharp/pull/1008
  codgen:
    runs-on: windows-latest
    name: MSBuild build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
      - name: Setup dotnet SDK 6
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'  
      - name: Restore nugets (msbuild)
        run: msbuild .\src\KubernetesClient.Models\ -t:restore -p:RestorePackagesConfig=true
      - name: Build (msbuild)
        run: msbuild .\src\KubernetesClient.Models\
        
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
           3.1.x
           5.0.x
           6.0.x        
      - name: Minikube
        run: minikube start
      - name: Test
        run: |
          true > skip.log
          env K8S_E2E_MINIKUBE=1 dotnet test tests/E2E.Tests --logger "SkipTestLogger;file=$PWD/skip.log"
          if [ -s skip.log ]; then
            cat skip.log
            echo "CASES MUST NOT BE SKIPPED"
            exit 1
          fi      

on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
