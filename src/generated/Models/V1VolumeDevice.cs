// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// volumeDevice describes a mapping of a raw block device within a
    /// container.
    /// </summary>
    public partial class V1VolumeDevice
    {
        /// <summary>
        /// Initializes a new instance of the V1VolumeDevice class.
        /// </summary>
        public V1VolumeDevice()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1VolumeDevice class.
        /// </summary>
        /// <param name="devicePath">devicePath is the path inside of the
        /// container that the device will be mapped to.</param>
        /// <param name="name">name must match the name of a
        /// persistentVolumeClaim in the pod</param>
        public V1VolumeDevice(string devicePath, string name)
        {
            DevicePath = devicePath;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets devicePath is the path inside of the container that
        /// the device will be mapped to.
        /// </summary>
        [JsonProperty(PropertyName = "devicePath")]
        public string DevicePath { get; set; }

        /// <summary>
        /// Gets or sets name must match the name of a persistentVolumeClaim in
        /// the pod
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DevicePath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DevicePath");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
