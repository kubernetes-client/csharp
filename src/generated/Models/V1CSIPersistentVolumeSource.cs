// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents storage that is managed by an external CSI volume driver
    /// </summary>
    public partial class V1CSIPersistentVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1CSIPersistentVolumeSource
        /// class.
        /// </summary>
        public V1CSIPersistentVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1CSIPersistentVolumeSource
        /// class.
        /// </summary>
        /// <param name="driver">Driver is the name of the driver to use for
        /// this volume. Required.</param>
        /// <param name="volumeHandle">VolumeHandle is the unique volume name
        /// returned by the CSI volume plugin’s CreateVolume to refer to the
        /// volume on all subsequent calls. Required.</param>
        /// <param name="readOnlyProperty">Optional: The value to pass to
        /// ControllerPublishVolumeRequest. Defaults to false
        /// (read/write).</param>
        public V1CSIPersistentVolumeSource(string driver, string volumeHandle, bool? readOnlyProperty = default(bool?))
        {
            Driver = driver;
            ReadOnlyProperty = readOnlyProperty;
            VolumeHandle = volumeHandle;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets driver is the name of the driver to use for this
        /// volume. Required.
        /// </summary>
        [JsonProperty(PropertyName = "driver")]
        public string Driver { get; set; }

        /// <summary>
        /// Gets or sets optional: The value to pass to
        /// ControllerPublishVolumeRequest. Defaults to false (read/write).
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Gets or sets volumeHandle is the unique volume name returned by the
        /// CSI volume plugin’s CreateVolume to refer to the volume on all
        /// subsequent calls. Required.
        /// </summary>
        [JsonProperty(PropertyName = "volumeHandle")]
        public string VolumeHandle { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Driver == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Driver");
            }
            if (VolumeHandle == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VolumeHandle");
            }
        }
    }
}
