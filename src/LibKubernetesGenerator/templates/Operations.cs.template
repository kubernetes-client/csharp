// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/src/LibKubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s;

public partial class AbstractKubernetes : I{{name}}Operations
{
    {{#apis}}
    {{#IfReturnType operation "void"}}
    private async Task<HttpOperationResponse> I{{name}}Operations_{{GetMethodName operation "WithHttpMessagesAsync"}}(
    {{/IfReturnType operation "void"}}
    {{#IfReturnType operation "obj"}}
    private async Task<HttpOperationResponse<T>> I{{name}}Operations_{{GetMethodName operation "WithHttpMessagesAsync"}}<T>(
    {{/IfReturnType operation "obj"}}
    {{#IfReturnType operation "stream"}}
    private async Task<HttpOperationResponse<Stream>> I{{name}}Operations_{{GetMethodName operation "WithHttpMessagesAsync"}}(
    {{/IfReturnType operation "stream"}}
{{#operation.parameters}}
        {{GetDotNetType .}} {{GetDotNetName .}},
{{/operation.parameters}}
        IReadOnlyDictionary<string, IReadOnlyList<string>> customHeaders,
        CancellationToken cancellationToken)
    {
        using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
        cts.CancelAfter(HttpClientTimeout);
        {{#IfParamContains operation "watch"}}
        if (watch == true)
        {
            cts.CancelAfter(Timeout.InfiniteTimeSpan);
        }
        {{/IfParamContains operation "watch"}}
        cancellationToken = cts.Token;

        {{#operation.parameters}}
        {{#isRequired}}
        if ({{GetDotNetName name}} == null)
        {
            throw new ArgumentNullException("{{GetDotNetName name}}");
        }
        {{/isRequired}}
        {{/operation.parameters}}

        // Construct URL
        var url = $"{{ToInterpolationPathString path}}";
        {{#IfGroupPathParamContainsGroup path}}
        url = url.Replace("apis//", "api/");
        {{/IfGroupPathParamContainsGroup}}
        {{#IfListNotEmpty operation.parameters}}
        var q = new QueryBuilder();
        {{#operation.parameters}}
        {{#IfKindIs . "query"}}
        q.Append("{{name}}", {{GetDotNetName name}});
        {{/IfKindIs . "query"}}
        {{/operation.parameters}}
        url += q.ToString();
        {{/IfListNotEmpty operation.parameters}}

        // Create HTTP transport
        {{#IfParamContains operation "body"}}
        var httpResponse = await SendRequest(url, HttpMethods.{{Method}}, customHeaders, body, cancellationToken);
        {{/IfParamContains operation "body"}}
        {{#IfParamDoesNotContain operation "body"}}
        var httpResponse = await SendRequest<object>(url, HttpMethods.{{Method}}, customHeaders, null, cancellationToken);
        {{/IfParamDoesNotContain operation "body"}}
        // Create Result
        var httpRequest = httpResponse.RequestMessage;
        {{#IfReturnType operation "void"}}
        HttpOperationResponse result = new HttpOperationResponse() { Request = httpRequest, Response =  httpResponse };
        {{/IfReturnType operation "void"}}
        {{#IfReturnType operation "obj"}}
        var result = await CreateResultAsync<T>(
            httpRequest,
            httpResponse,
            {{#IfParamContains operation "watch"}}
            watch,
            {{/IfParamContains operation "watch"}}
            {{#IfParamDoesNotContain operation "watch"}}
            false,
            {{/IfParamDoesNotContain operation "watch"}}
            cancellationToken);
        {{/IfReturnType operation "obj"}}
        {{#IfReturnType operation "stream"}}
        var result = new HttpOperationResponse<Stream>() {
                            Request = httpRequest,
                            Response = httpResponse,
                            Body = await httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false) };
        {{/IfReturnType operation "stream"}}
        return result;
    }

    /// <inheritdoc/>
    async Task<HttpOperationResponse{{GetReturnType operation "<>"}}> I{{name}}Operations.{{GetMethodName operation "WithHttpMessagesAsync"}}(
{{#operation.parameters}}
        {{GetDotNetType .}} {{GetDotNetName .}},
{{/operation.parameters}}
        IReadOnlyDictionary<string, IReadOnlyList<string>> customHeaders,
        CancellationToken cancellationToken)
    {
        {{#IfReturnType operation "void"}}
        return await I{{name}}Operations_{{GetMethodName operation "WithHttpMessagesAsync"}}(
        {{#operation.parameters}}
            {{GetDotNetName .}},
        {{/operation.parameters}}
            customHeaders,
            cancellationToken).ConfigureAwait(false);
        {{/IfReturnType operation "void"}}
        {{#IfReturnType operation "obj"}}
        return await I{{name}}Operations_{{GetMethodName operation "WithHttpMessagesAsync"}}{{GetReturnType operation "<>"}}(
        {{#operation.parameters}}
            {{GetDotNetName .}},
        {{/operation.parameters}}
            customHeaders,
            cancellationToken).ConfigureAwait(false);
        {{/IfReturnType operation "obj"}}
        {{#IfReturnType operation "stream"}}
        return await I{{name}}Operations_{{GetMethodName operation "WithHttpMessagesAsync"}}(
        {{#operation.parameters}}
            {{GetDotNetName .}},
        {{/operation.parameters}}
            customHeaders,
            cancellationToken).ConfigureAwait(false);
        {{/IfReturnType operation "stream"}}
    }

    {{#IfReturnType operation "object"}}
    /// <inheritdoc/>
    async Task<HttpOperationResponse<T>> I{{name}}Operations.{{GetMethodName operation "WithHttpMessagesAsync"}}<T>(
{{#operation.parameters}}
        {{GetDotNetType .}} {{GetDotNetName .}},
{{/operation.parameters}}
        IReadOnlyDictionary<string, IReadOnlyList<string>> customHeaders,
        CancellationToken cancellationToken)
    {
        return await I{{name}}Operations_{{GetMethodName operation "WithHttpMessagesAsync"}}<T>(
        {{#operation.parameters}}
            {{GetDotNetName .}},
        {{/operation.parameters}}
            customHeaders,
            cancellationToken).ConfigureAwait(false);
    }
    {{/IfReturnType operation "object"}}
    {{/apis}}
}
