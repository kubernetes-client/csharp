// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// JobStatus represents the current state of a Job.
    /// </summary>
    public partial class V1JobStatus
    {
        /// <summary>
        /// Initializes a new instance of the V1JobStatus class.
        /// </summary>
        public V1JobStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1JobStatus class.
        /// </summary>
        /// <param name="active">
        /// The number of actively running pods.
        /// </param>
        /// <param name="completedIndexes">
        /// CompletedIndexes holds the completed indexes when .spec.completionMode =
        /// &quot;Indexed&quot; in a text format. The indexes are represented as decimal integers
        /// separated by commas. The numbers are listed in increasing order. Three or more
        /// consecutive numbers are compressed and represented by the first and last element
        /// of the series, separated by a hyphen. For example, if the completed indexes are
        /// 1, 3, 4, 5 and 7, they are represented as &quot;1,3-5,7&quot;.
        /// </param>
        /// <param name="completionTime">
        /// Represents time when the job was completed. It is not guaranteed to be set in
        /// happens-before order across separate operations. It is represented in RFC3339
        /// form and is in UTC. The completion time is only set when the job finishes
        /// successfully.
        /// </param>
        /// <param name="conditions">
        /// The latest available observations of an object&apos;s current state. When a Job
        /// fails, one of the conditions will have type &quot;Failed&quot; and status true. When a Job
        /// is suspended, one of the conditions will have type &quot;Suspended&quot; and status true;
        /// when the Job is resumed, the status of this condition will become false. When a
        /// Job is completed, one of the conditions will have type &quot;Complete&quot; and status
        /// true. More info:
        /// https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        /// </param>
        /// <param name="failed">
        /// The number of pods which reached phase Failed.
        /// </param>
        /// <param name="startTime">
        /// Represents time when the job controller started processing a job. When a Job is
        /// created in the suspended state, this field is not set until the first time it is
        /// resumed. This field is reset every time a Job is resumed from suspension. It is
        /// represented in RFC3339 form and is in UTC.
        /// </param>
        /// <param name="succeeded">
        /// The number of pods which reached phase Succeeded.
        /// </param>
        /// <param name="uncountedTerminatedPods">
        /// UncountedTerminatedPods holds the UIDs of Pods that have terminated but the job
        /// controller hasn&apos;t yet accounted for in the status counters.
        /// 
        /// The job controller creates pods with a finalizer. When a pod terminates
        /// (succeeded or failed), the controller does three steps to account for it in the
        /// job status: (1) Add the pod UID to the arrays in this field. (2) Remove the pod
        /// finalizer. (3) Remove the pod UID from the arrays while increasing the
        /// corresponding
        /// counter.
        /// 
        /// This field is alpha-level. The job controller only makes use of this field when
        /// the feature gate PodTrackingWithFinalizers is enabled. Old jobs might not be
        /// tracked using this field, in which case the field remains null.
        /// </param>
        public V1JobStatus(int? active = null, string completedIndexes = null, System.DateTime? completionTime = null, IList<V1JobCondition> conditions = null, int? failed = null, System.DateTime? startTime = null, int? succeeded = null, V1UncountedTerminatedPods uncountedTerminatedPods = null)
        {
            Active = active;
            CompletedIndexes = completedIndexes;
            CompletionTime = completionTime;
            Conditions = conditions;
            Failed = failed;
            StartTime = startTime;
            Succeeded = succeeded;
            UncountedTerminatedPods = uncountedTerminatedPods;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// The number of actively running pods.
        /// </summary>
        [JsonProperty(PropertyName = "active")]
        public int? Active { get; set; }

        /// <summary>
        /// CompletedIndexes holds the completed indexes when .spec.completionMode =
        /// &quot;Indexed&quot; in a text format. The indexes are represented as decimal integers
        /// separated by commas. The numbers are listed in increasing order. Three or more
        /// consecutive numbers are compressed and represented by the first and last element
        /// of the series, separated by a hyphen. For example, if the completed indexes are
        /// 1, 3, 4, 5 and 7, they are represented as &quot;1,3-5,7&quot;.
        /// </summary>
        [JsonProperty(PropertyName = "completedIndexes")]
        public string CompletedIndexes { get; set; }

        /// <summary>
        /// Represents time when the job was completed. It is not guaranteed to be set in
        /// happens-before order across separate operations. It is represented in RFC3339
        /// form and is in UTC. The completion time is only set when the job finishes
        /// successfully.
        /// </summary>
        [JsonProperty(PropertyName = "completionTime")]
        public System.DateTime? CompletionTime { get; set; }

        /// <summary>
        /// The latest available observations of an object&apos;s current state. When a Job
        /// fails, one of the conditions will have type &quot;Failed&quot; and status true. When a Job
        /// is suspended, one of the conditions will have type &quot;Suspended&quot; and status true;
        /// when the Job is resumed, the status of this condition will become false. When a
        /// Job is completed, one of the conditions will have type &quot;Complete&quot; and status
        /// true. More info:
        /// https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
        /// </summary>
        [JsonProperty(PropertyName = "conditions")]
        public IList<V1JobCondition> Conditions { get; set; }

        /// <summary>
        /// The number of pods which reached phase Failed.
        /// </summary>
        [JsonProperty(PropertyName = "failed")]
        public int? Failed { get; set; }

        /// <summary>
        /// Represents time when the job controller started processing a job. When a Job is
        /// created in the suspended state, this field is not set until the first time it is
        /// resumed. This field is reset every time a Job is resumed from suspension. It is
        /// represented in RFC3339 form and is in UTC.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime { get; set; }

        /// <summary>
        /// The number of pods which reached phase Succeeded.
        /// </summary>
        [JsonProperty(PropertyName = "succeeded")]
        public int? Succeeded { get; set; }

        /// <summary>
        /// UncountedTerminatedPods holds the UIDs of Pods that have terminated but the job
        /// controller hasn&apos;t yet accounted for in the status counters.
        /// 
        /// The job controller creates pods with a finalizer. When a pod terminates
        /// (succeeded or failed), the controller does three steps to account for it in the
        /// job status: (1) Add the pod UID to the arrays in this field. (2) Remove the pod
        /// finalizer. (3) Remove the pod UID from the arrays while increasing the
        /// corresponding
        /// counter.
        /// 
        /// This field is alpha-level. The job controller only makes use of this field when
        /// the feature gate PodTrackingWithFinalizers is enabled. Old jobs might not be
        /// tracked using this field, in which case the field remains null.
        /// </summary>
        [JsonProperty(PropertyName = "uncountedTerminatedPods")]
        public V1UncountedTerminatedPods UncountedTerminatedPods { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Conditions != null){
                foreach(var obj in Conditions)
                {
                    obj.Validate();
                }
            }
            UncountedTerminatedPods?.Validate();
        }
    }
}
