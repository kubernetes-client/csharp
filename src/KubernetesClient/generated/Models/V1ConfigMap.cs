// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// ConfigMap holds configuration data for pods to consume.
    /// </summary>
    public partial class V1ConfigMap
    {
        /// <summary>
        /// Initializes a new instance of the V1ConfigMap class.
        /// </summary>
        public V1ConfigMap()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ConfigMap class.
        /// </summary>
        /// <param name="apiVersion">
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </param>
        /// <param name="binaryData">
        /// BinaryData contains the binary data. Each key must consist of alphanumeric
        /// characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. BinaryData can contain byte sequences that are not
        /// in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones
        /// in the Data field, this is enforced during validation process. Using this field
        /// will require 1.10+ apiserver and kubelet.
        /// </param>
        /// <param name="data">
        /// Data contains the configuration data. Each key must consist of alphanumeric
        /// characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. Values with non-UTF-8 byte sequences must use the
        /// BinaryData field. The keys stored in Data must not overlap with the keys in the
        /// BinaryData field, this is enforced during validation process.
        /// </param>
        /// <param name="immutable">
        /// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be
        /// updated (only object metadata can be modified). If not set to true, the field
        /// can be modified at any time. Defaulted to nil.
        /// </param>
        /// <param name="kind">
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="metadata">
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </param>
        public V1ConfigMap(string apiVersion = null, IDictionary<string, byte[]> binaryData = null, IDictionary<string, string> data = null, bool? immutable = null, string kind = null, V1ObjectMeta metadata = null)
        {
            ApiVersion = apiVersion;
            BinaryData = binaryData;
            Data = data;
            Immutable = immutable;
            Kind = kind;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// BinaryData contains the binary data. Each key must consist of alphanumeric
        /// characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. BinaryData can contain byte sequences that are not
        /// in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones
        /// in the Data field, this is enforced during validation process. Using this field
        /// will require 1.10+ apiserver and kubelet.
        /// </summary>
        [JsonProperty(PropertyName = "binaryData")]
        public IDictionary<string, byte[]> BinaryData { get; set; }

        /// <summary>
        /// Data contains the configuration data. Each key must consist of alphanumeric
        /// characters, &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. Values with non-UTF-8 byte sequences must use the
        /// BinaryData field. The keys stored in Data must not overlap with the keys in the
        /// BinaryData field, this is enforced during validation process.
        /// </summary>
        [JsonProperty(PropertyName = "data")]
        public IDictionary<string, string> Data { get; set; }

        /// <summary>
        /// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be
        /// updated (only object metadata can be modified). If not set to true, the field
        /// can be modified at any time. Defaulted to nil.
        /// </summary>
        [JsonProperty(PropertyName = "immutable")]
        public bool? Immutable { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public V1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            Metadata?.Validate();
        }
    }
}
