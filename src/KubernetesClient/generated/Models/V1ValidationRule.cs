// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// ValidationRule describes a validation rule written in the CEL expression
        /// language.
    /// </summary>
    public partial class V1ValidationRule
    {
        /// <summary>
        /// Initializes a new instance of the V1ValidationRule class.
        /// </summary>
        public V1ValidationRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ValidationRule class.
        /// </summary>
        /// <param name="rule">
        /// Rule represents the expression which will be evaluated by CEL. ref:
        /// https://github.com/google/cel-spec The Rule is scoped to the location of the
        /// x-kubernetes-validations extension in the schema. The `self` variable in the CEL
        /// expression is bound to the scoped value. Example: - Rule scoped to the root of a
        /// resource with a status subresource: {&quot;rule&quot;: &quot;self.status.actual &lt;=
        /// self.spec.maxDesired&quot;}
        /// 
        /// If the Rule is scoped to an object with properties, the accessible properties of
        /// the object are field selectable via `self.field` and field presence can be
        /// checked via `has(self.field)`. Null valued fields are treated as absent fields
        /// in CEL expressions. If the Rule is scoped to an object with additionalProperties
        /// (i.e. a map) the value of the map are accessible via `self[mapKey]`, map
        /// containment can be checked via `mapKey in self` and all entries of the map are
        /// accessible via CEL macros and functions such as `self.all(...)`. If the Rule is
        /// scoped to an array, the elements of the array are accessible via `self[i]` and
        /// also by macros and functions. If the Rule is scoped to a scalar, `self` is bound
        /// to the scalar value. Examples: - Rule scoped to a map of objects: {&quot;rule&quot;:
        /// &quot;self.components[&apos;Widget&apos;].priority &lt; 10&quot;} - Rule scoped to a list of integers:
        /// {&quot;rule&quot;: &quot;self.values.all(value, value &gt;= 0 &amp;&amp; value &lt; 100)&quot;} - Rule scoped to a
        /// string value: {&quot;rule&quot;: &quot;self.startsWith(&apos;kube&apos;)&quot;}
        /// 
        /// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
        /// accessible from the root of the object and from any
        /// x-kubernetes-embedded-resource annotated objects. No other metadata properties
        /// are accessible.
        /// 
        /// Unknown data preserved in custom resources via
        /// x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This
        /// includes: - Unknown field values that are preserved by object schemas with
        /// x-kubernetes-preserve-unknown-fields. - Object properties where the property
        /// schema is of an &quot;unknown type&quot;. An &quot;unknown type&quot; is recursively defined as:
        /// - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
        /// - An array where the items schema is of an &quot;unknown type&quot;
        /// - An object where the additionalProperties schema is of an &quot;unknown type&quot;
        /// 
        /// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
        /// Accessible property names are escaped according to the following rules when
        /// accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
        /// &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
        /// names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
        /// keywords are:
        /// &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
        /// &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
        /// &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
        /// Examples:
        /// - Rule accessing a property named &quot;namespace&quot;: {&quot;rule&quot;: &quot;self.__namespace__ &gt;
        /// 0&quot;}
        /// - Rule accessing a property named &quot;x-prop&quot;: {&quot;rule&quot;: &quot;self.x__dash__prop &gt; 0&quot;}
        /// - Rule accessing a property named &quot;redact__d&quot;: {&quot;rule&quot;:
        /// &quot;self.redact__underscores__d &gt; 0&quot;}
        /// 
        /// Equality on arrays with x-kubernetes-list-type of &apos;set&apos; or &apos;map&apos; ignores element
        /// order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with
        /// x-kubernetes-list-type use the semantics of the list type:
        /// - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
        /// `X` are preserved and
        /// non-intersecting elements in `Y` are appended, retaining their partial order.
        /// - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
        /// are preserved but the values
        /// are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
        /// Elements in `Y` with
        /// non-intersecting keys are appended, retaining their partial order.
        /// </param>
        /// <param name="message">
        /// Message represents the message displayed when validation fails. The message is
        /// required if the Rule contains line breaks. The message must not contain line
        /// breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL with
        /// the host matching spec.host&quot;
        /// </param>
        public V1ValidationRule(string rule, string message = null)
        {
            Message = message;
            Rule = rule;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Message represents the message displayed when validation fails. The message is
        /// required if the Rule contains line breaks. The message must not contain line
        /// breaks. If unset, the message is &quot;failed rule: {Rule}&quot;. e.g. &quot;must be a URL with
        /// the host matching spec.host&quot;
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Rule represents the expression which will be evaluated by CEL. ref:
        /// https://github.com/google/cel-spec The Rule is scoped to the location of the
        /// x-kubernetes-validations extension in the schema. The `self` variable in the CEL
        /// expression is bound to the scoped value. Example: - Rule scoped to the root of a
        /// resource with a status subresource: {&quot;rule&quot;: &quot;self.status.actual &lt;=
        /// self.spec.maxDesired&quot;}
        /// 
        /// If the Rule is scoped to an object with properties, the accessible properties of
        /// the object are field selectable via `self.field` and field presence can be
        /// checked via `has(self.field)`. Null valued fields are treated as absent fields
        /// in CEL expressions. If the Rule is scoped to an object with additionalProperties
        /// (i.e. a map) the value of the map are accessible via `self[mapKey]`, map
        /// containment can be checked via `mapKey in self` and all entries of the map are
        /// accessible via CEL macros and functions such as `self.all(...)`. If the Rule is
        /// scoped to an array, the elements of the array are accessible via `self[i]` and
        /// also by macros and functions. If the Rule is scoped to a scalar, `self` is bound
        /// to the scalar value. Examples: - Rule scoped to a map of objects: {&quot;rule&quot;:
        /// &quot;self.components[&apos;Widget&apos;].priority &lt; 10&quot;} - Rule scoped to a list of integers:
        /// {&quot;rule&quot;: &quot;self.values.all(value, value &gt;= 0 &amp;&amp; value &lt; 100)&quot;} - Rule scoped to a
        /// string value: {&quot;rule&quot;: &quot;self.startsWith(&apos;kube&apos;)&quot;}
        /// 
        /// The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
        /// accessible from the root of the object and from any
        /// x-kubernetes-embedded-resource annotated objects. No other metadata properties
        /// are accessible.
        /// 
        /// Unknown data preserved in custom resources via
        /// x-kubernetes-preserve-unknown-fields is not accessible in CEL expressions. This
        /// includes: - Unknown field values that are preserved by object schemas with
        /// x-kubernetes-preserve-unknown-fields. - Object properties where the property
        /// schema is of an &quot;unknown type&quot;. An &quot;unknown type&quot; is recursively defined as:
        /// - A schema with no type and x-kubernetes-preserve-unknown-fields set to true
        /// - An array where the items schema is of an &quot;unknown type&quot;
        /// - An object where the additionalProperties schema is of an &quot;unknown type&quot;
        /// 
        /// Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
        /// Accessible property names are escaped according to the following rules when
        /// accessed in the expression: - &apos;__&apos; escapes to &apos;__underscores__&apos; - &apos;.&apos; escapes to
        /// &apos;__dot__&apos; - &apos;-&apos; escapes to &apos;__dash__&apos; - &apos;/&apos; escapes to &apos;__slash__&apos; - Property
        /// names that exactly match a CEL RESERVED keyword escape to &apos;__{keyword}__&apos;. The
        /// keywords are:
        /// &quot;true&quot;, &quot;false&quot;, &quot;null&quot;, &quot;in&quot;, &quot;as&quot;, &quot;break&quot;, &quot;const&quot;, &quot;continue&quot;, &quot;else&quot;,
        /// &quot;for&quot;, &quot;function&quot;, &quot;if&quot;,
        /// &quot;import&quot;, &quot;let&quot;, &quot;loop&quot;, &quot;package&quot;, &quot;namespace&quot;, &quot;return&quot;.
        /// Examples:
        /// - Rule accessing a property named &quot;namespace&quot;: {&quot;rule&quot;: &quot;self.__namespace__ &gt;
        /// 0&quot;}
        /// - Rule accessing a property named &quot;x-prop&quot;: {&quot;rule&quot;: &quot;self.x__dash__prop &gt; 0&quot;}
        /// - Rule accessing a property named &quot;redact__d&quot;: {&quot;rule&quot;:
        /// &quot;self.redact__underscores__d &gt; 0&quot;}
        /// 
        /// Equality on arrays with x-kubernetes-list-type of &apos;set&apos; or &apos;map&apos; ignores element
        /// order, i.e. [1, 2] == [2, 1]. Concatenation on arrays with
        /// x-kubernetes-list-type use the semantics of the list type:
        /// - &apos;set&apos;: `X + Y` performs a union where the array positions of all elements in
        /// `X` are preserved and
        /// non-intersecting elements in `Y` are appended, retaining their partial order.
        /// - &apos;map&apos;: `X + Y` performs a merge where the array positions of all keys in `X`
        /// are preserved but the values
        /// are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
        /// Elements in `Y` with
        /// non-intersecting keys are appended, retaining their partial order.
        /// </summary>
        [JsonPropertyName("rule")]
        public string Rule { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
