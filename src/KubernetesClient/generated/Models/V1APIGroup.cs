// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// APIGroup contains the name, the supported versions, and the preferred version of
        /// a group.
    /// </summary>
    public partial class V1APIGroup
    {
        /// <summary>
        /// Initializes a new instance of the V1APIGroup class.
        /// </summary>
        public V1APIGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1APIGroup class.
        /// </summary>
        /// <param name="name">
        /// name is the name of the group.
        /// </param>
        /// <param name="versions">
        /// versions are the versions supported in this group.
        /// </param>
        /// <param name="apiVersion">
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </param>
        /// <param name="kind">
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="preferredVersion">
        /// preferredVersion is the version preferred by the API server, which probably is
        /// the storage version.
        /// </param>
        /// <param name="serverAddressByClientCIDRs">
        /// a map of client CIDR to server address that is serving this group. This is to
        /// help clients reach servers in the most network-efficient way possible. Clients
        /// can use the appropriate server address as per the CIDR that they match. In case
        /// of multiple matches, clients should use the longest matching CIDR. The server
        /// returns only those CIDRs that it thinks that the client can match. For example:
        /// the master will return an internal IP CIDR only, if the client reaches the
        /// server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
        /// header or request.RemoteAddr (in that order) to get the client IP.
        /// </param>
        public V1APIGroup(string name, IList<V1GroupVersionForDiscovery> versions, string apiVersion = null, string kind = null, V1GroupVersionForDiscovery preferredVersion = null, IList<V1ServerAddressByClientCIDR> serverAddressByClientCIDRs = null)
        {
            ApiVersion = apiVersion;
            Kind = kind;
            Name = name;
            PreferredVersion = preferredVersion;
            ServerAddressByClientCIDRs = serverAddressByClientCIDRs;
            Versions = versions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonPropertyName("apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonPropertyName("kind")]
        public string Kind { get; set; }

        /// <summary>
        /// name is the name of the group.
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// preferredVersion is the version preferred by the API server, which probably is
        /// the storage version.
        /// </summary>
        [JsonPropertyName("preferredVersion")]
        public V1GroupVersionForDiscovery PreferredVersion { get; set; }

        /// <summary>
        /// a map of client CIDR to server address that is serving this group. This is to
        /// help clients reach servers in the most network-efficient way possible. Clients
        /// can use the appropriate server address as per the CIDR that they match. In case
        /// of multiple matches, clients should use the longest matching CIDR. The server
        /// returns only those CIDRs that it thinks that the client can match. For example:
        /// the master will return an internal IP CIDR only, if the client reaches the
        /// server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip
        /// header or request.RemoteAddr (in that order) to get the client IP.
        /// </summary>
        [JsonPropertyName("serverAddressByClientCIDRs")]
        public IList<V1ServerAddressByClientCIDR> ServerAddressByClientCIDRs { get; set; }

        /// <summary>
        /// versions are the versions supported in this group.
        /// </summary>
        [JsonPropertyName("versions")]
        public IList<V1GroupVersionForDiscovery> Versions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            PreferredVersion?.Validate();
            if (ServerAddressByClientCIDRs != null){
                foreach(var obj in ServerAddressByClientCIDRs)
                {
                    obj.Validate();
                }
            }
            if (Versions != null){
                foreach(var obj in Versions)
                {
                    obj.Validate();
                }
            }
        }
    }
}
