// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// Represents a cinder volume resource in Openstack. A Cinder volume must exist
        /// before mounting to a container. The volume must also be in the same region as
        /// the kubelet. Cinder volumes support ownership management and SELinux relabeling.
    /// </summary>
    public partial class V1CinderPersistentVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1CinderPersistentVolumeSource class.
        /// </summary>
        public V1CinderPersistentVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1CinderPersistentVolumeSource class.
        /// </summary>
        /// <param name="volumeID">
        /// volume id used to identify the volume in cinder. More info:
        /// https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </param>
        /// <param name="fsType">
        /// Filesystem type to mount. Must be a filesystem type supported by the host
        /// operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
        /// &quot;ext4&quot; if unspecified. More info:
        /// https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </param>
        /// <param name="readOnlyProperty">
        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
        /// setting in VolumeMounts. More info:
        /// https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </param>
        /// <param name="secretRef">
        /// Optional: points to a secret object containing parameters used to connect to
        /// OpenStack.
        /// </param>
        public V1CinderPersistentVolumeSource(string volumeID, string fsType = null, bool? readOnlyProperty = null, V1SecretReference secretRef = null)
        {
            FsType = fsType;
            ReadOnlyProperty = readOnlyProperty;
            SecretRef = secretRef;
            VolumeID = volumeID;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by the host
        /// operating system. Examples: &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be
        /// &quot;ext4&quot; if unspecified. More info:
        /// https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </summary>
        [JsonPropertyName("fsType")]
        public string FsType { get; set; }

        /// <summary>
        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly
        /// setting in VolumeMounts. More info:
        /// https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </summary>
        [JsonPropertyName("readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Optional: points to a secret object containing parameters used to connect to
        /// OpenStack.
        /// </summary>
        [JsonPropertyName("secretRef")]
        public V1SecretReference SecretRef { get; set; }

        /// <summary>
        /// volume id used to identify the volume in cinder. More info:
        /// https://examples.k8s.io/mysql-cinder-pd/README.md
        /// </summary>
        [JsonPropertyName("volumeID")]
        public string VolumeID { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            SecretRef?.Validate();
        }
    }
}
