// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// HTTPIngressPath associates a path with a backend. Incoming urls
    /// matching the path are forwarded to the backend.
    /// </summary>
    public partial class Networkingv1beta1HTTPIngressPath
    {
        /// <summary>
        /// Initializes a new instance of the Networkingv1beta1HTTPIngressPath
        /// class.
        /// </summary>
        public Networkingv1beta1HTTPIngressPath()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Networkingv1beta1HTTPIngressPath
        /// class.
        /// </summary>
        /// <param name="backend">Backend defines the referenced service
        /// endpoint to which the traffic will be forwarded to.</param>
        /// <param name="path">Path is matched against the path of an incoming
        /// request. Currently it can contain characters disallowed from the
        /// conventional "path" part of a URL as defined by RFC 3986. Paths
        /// must begin with a '/'. When unspecified, all paths from incoming
        /// requests are matched.</param>
        /// <param name="pathType">PathType determines the interpretation of
        /// the Path matching. PathType can be one of the following values: *
        /// Exact: Matches the URL path exactly. * Prefix: Matches based on a
        /// URL path prefix split by '/'. Matching is
        /// done on a path element by element basis. A path element refers is
        /// the
        /// list of labels in the path split by the '/' separator. A request is
        /// a
        /// match for path p if every p is an element-wise prefix of p of the
        /// request path. Note that if the last element of the path is a
        /// substring
        /// of the last element in request path, it is not a match (e.g.
        /// /foo/bar
        /// matches /foo/bar/baz, but does not match /foo/barbaz).
        /// * ImplementationSpecific: Interpretation of the Path matching is up
        /// to
        /// the IngressClass. Implementations can treat this as a separate
        /// PathType
        /// or treat it identically to Prefix or Exact path types.
        /// Implementations are required to support all path types. Defaults to
        /// ImplementationSpecific.</param>
        public Networkingv1beta1HTTPIngressPath(Networkingv1beta1IngressBackend backend, string path = default(string), string pathType = default(string))
        {
            Backend = backend;
            Path = path;
            PathType = pathType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets backend defines the referenced service endpoint to
        /// which the traffic will be forwarded to.
        /// </summary>
        [JsonProperty(PropertyName = "backend")]
        public Networkingv1beta1IngressBackend Backend { get; set; }

        /// <summary>
        /// Gets or sets path is matched against the path of an incoming
        /// request. Currently it can contain characters disallowed from the
        /// conventional "path" part of a URL as defined by RFC 3986. Paths
        /// must begin with a '/'. When unspecified, all paths from incoming
        /// requests are matched.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets pathType determines the interpretation of the Path
        /// matching. PathType can be one of the following values: * Exact:
        /// Matches the URL path exactly. * Prefix: Matches based on a URL path
        /// prefix split by '/'. Matching is
        /// done on a path element by element basis. A path element refers is
        /// the
        /// list of labels in the path split by the '/' separator. A request is
        /// a
        /// match for path p if every p is an element-wise prefix of p of the
        /// request path. Note that if the last element of the path is a
        /// substring
        /// of the last element in request path, it is not a match (e.g.
        /// /foo/bar
        /// matches /foo/bar/baz, but does not match /foo/barbaz).
        /// * ImplementationSpecific: Interpretation of the Path matching is up
        /// to
        /// the IngressClass. Implementations can treat this as a separate
        /// PathType
        /// or treat it identically to Prefix or Exact path types.
        /// Implementations are required to support all path types. Defaults to
        /// ImplementationSpecific.
        /// </summary>
        [JsonProperty(PropertyName = "pathType")]
        public string PathType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Backend == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Backend");
            }
            if (Backend != null)
            {
                Backend.Validate();
            }
        }
    }
}
