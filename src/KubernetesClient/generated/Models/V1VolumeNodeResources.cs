// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// VolumeNodeResources is a set of resource limits for scheduling of volumes.
    /// </summary>
    public partial class V1VolumeNodeResources
    {
        /// <summary>
        /// Initializes a new instance of the V1VolumeNodeResources class.
        /// </summary>
        public V1VolumeNodeResources()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1VolumeNodeResources class.
        /// </summary>
        /// <param name="count">
        /// Maximum number of unique volumes managed by the CSI driver that can be used on a
        /// node. A volume that is both attached and mounted on a node is considered to be
        /// used once, not twice. The same rule applies for a unique volume that is shared
        /// among multiple pods on the same node. If this field is not specified, then the
        /// supported number of volumes on this node is unbounded.
        /// </param>
        public V1VolumeNodeResources(int? count = null)
        {
            Count = count;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Maximum number of unique volumes managed by the CSI driver that can be used on a
        /// node. A volume that is both attached and mounted on a node is considered to be
        /// used once, not twice. The same rule applies for a unique volume that is shared
        /// among multiple pods on the same node. If this field is not specified, then the
        /// supported number of volumes on this node is unbounded.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
