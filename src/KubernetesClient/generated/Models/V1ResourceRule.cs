// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// ResourceRule is the list of actions the subject is allowed to perform on
        /// resources. The list ordering isn&apos;t significant, may contain duplicates, and
        /// possibly be incomplete.
    /// </summary>
    public partial class V1ResourceRule
    {
        /// <summary>
        /// Initializes a new instance of the V1ResourceRule class.
        /// </summary>
        public V1ResourceRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ResourceRule class.
        /// </summary>
        /// <param name="verbs">
        /// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create,
        /// update, delete, proxy.  &quot;*&quot; means all.
        /// </param>
        /// <param name="apiGroups">
        /// APIGroups is the name of the APIGroup that contains the resources.  If multiple
        /// API groups are specified, any action requested against one of the enumerated
        /// resources in any API group will be allowed.  &quot;*&quot; means all.
        /// </param>
        /// <param name="resourceNames">
        /// ResourceNames is an optional white list of names that the rule applies to.  An
        /// empty set means that everything is allowed.  &quot;*&quot; means all.
        /// </param>
        /// <param name="resources">
        /// Resources is a list of resources this rule applies to.  &quot;*&quot; means all in the
        /// specified apiGroups.
        /// &quot;*/foo&quot; represents the subresource &apos;foo&apos; for all resources in the specified
        /// apiGroups.
        /// </param>
        public V1ResourceRule(IList<string> verbs, IList<string> apiGroups = null, IList<string> resourceNames = null, IList<string> resources = null)
        {
            ApiGroups = apiGroups;
            ResourceNames = resourceNames;
            Resources = resources;
            Verbs = verbs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// APIGroups is the name of the APIGroup that contains the resources.  If multiple
        /// API groups are specified, any action requested against one of the enumerated
        /// resources in any API group will be allowed.  &quot;*&quot; means all.
        /// </summary>
        [JsonProperty(PropertyName = "apiGroups")]
        public IList<string> ApiGroups { get; set; }

        /// <summary>
        /// ResourceNames is an optional white list of names that the rule applies to.  An
        /// empty set means that everything is allowed.  &quot;*&quot; means all.
        /// </summary>
        [JsonProperty(PropertyName = "resourceNames")]
        public IList<string> ResourceNames { get; set; }

        /// <summary>
        /// Resources is a list of resources this rule applies to.  &quot;*&quot; means all in the
        /// specified apiGroups.
        /// &quot;*/foo&quot; represents the subresource &apos;foo&apos; for all resources in the specified
        /// apiGroups.
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public IList<string> Resources { get; set; }

        /// <summary>
        /// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create,
        /// update, delete, proxy.  &quot;*&quot; means all.
        /// </summary>
        [JsonProperty(PropertyName = "verbs")]
        public IList<string> Verbs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
