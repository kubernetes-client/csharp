// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain
        /// combinations of fields are allowed
    /// </summary>
    public partial class V1NetworkPolicyPeer
    {
        /// <summary>
        /// Initializes a new instance of the V1NetworkPolicyPeer class.
        /// </summary>
        public V1NetworkPolicyPeer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1NetworkPolicyPeer class.
        /// </summary>
        /// <param name="ipBlock">
        /// IPBlock defines policy on a particular IPBlock. If this field is set then
        /// neither of the other fields can be.
        /// </param>
        /// <param name="namespaceSelector">
        /// Selects Namespaces using cluster-scoped labels. This field follows standard
        /// label selector semantics; if present but empty, it selects all namespaces.
        /// 
        /// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the
        /// Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
        /// Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
        /// </param>
        /// <param name="podSelector">
        /// This is a label selector which selects Pods. This field follows standard label
        /// selector semantics; if present but empty, it selects all pods.
        /// 
        /// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
        /// the Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
        /// Otherwise it selects the Pods matching PodSelector in the policy&apos;s own
        /// Namespace.
        /// </param>
        public V1NetworkPolicyPeer(V1IPBlock ipBlock = null, V1LabelSelector namespaceSelector = null, V1LabelSelector podSelector = null)
        {
            IpBlock = ipBlock;
            NamespaceSelector = namespaceSelector;
            PodSelector = podSelector;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// IPBlock defines policy on a particular IPBlock. If this field is set then
        /// neither of the other fields can be.
        /// </summary>
        [JsonProperty(PropertyName = "ipBlock")]
        public V1IPBlock IpBlock { get; set; }

        /// <summary>
        /// Selects Namespaces using cluster-scoped labels. This field follows standard
        /// label selector semantics; if present but empty, it selects all namespaces.
        /// 
        /// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the
        /// Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
        /// Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
        /// </summary>
        [JsonProperty(PropertyName = "namespaceSelector")]
        public V1LabelSelector NamespaceSelector { get; set; }

        /// <summary>
        /// This is a label selector which selects Pods. This field follows standard label
        /// selector semantics; if present but empty, it selects all pods.
        /// 
        /// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects
        /// the Pods matching PodSelector in the Namespaces selected by NamespaceSelector.
        /// Otherwise it selects the Pods matching PodSelector in the policy&apos;s own
        /// Namespace.
        /// </summary>
        [JsonProperty(PropertyName = "podSelector")]
        public V1LabelSelector PodSelector { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            IpBlock?.Validate();
            NamespaceSelector?.Validate();
            PodSelector?.Validate();
        }
    }
}
