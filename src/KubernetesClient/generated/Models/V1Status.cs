// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Status is a return value for calls that don&apos;t return other objects.
    /// </summary>
    public partial class V1Status
    {
        /// <summary>
        /// Initializes a new instance of the V1Status class.
        /// </summary>
        public V1Status()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1Status class.
        /// </summary>
        /// <param name="apiVersion">
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </param>
        /// <param name="code">
        /// Suggested HTTP return code for this status, 0 if not set.
        /// </param>
        /// <param name="details">
        /// Extended data associated with the reason.  Each reason may define its own
        /// extended details. This field is optional and the data returned is not guaranteed
        /// to conform to any schema except that defined by the reason type.
        /// </param>
        /// <param name="kind">
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="message">
        /// A human-readable description of the status of this operation.
        /// </param>
        /// <param name="metadata">
        /// Standard list metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="reason">
        /// A machine-readable description of why this operation is in the &quot;Failure&quot; status.
        /// If this value is empty there is no information available. A Reason clarifies an
        /// HTTP status code but does not override it.
        /// </param>
        /// <param name="status">
        /// Status of the operation. One of: &quot;Success&quot; or &quot;Failure&quot;. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        /// </param>
        public V1Status(string apiVersion = null, int? code = null, V1StatusDetails details = null, string kind = null, string message = null, V1ListMeta metadata = null, string reason = null, string status = null)
        {
            ApiVersion = apiVersion;
            Code = code;
            Details = details;
            Kind = kind;
            Message = message;
            Metadata = metadata;
            Reason = reason;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Suggested HTTP return code for this status, 0 if not set.
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public int? Code { get; set; }

        /// <summary>
        /// Extended data associated with the reason.  Each reason may define its own
        /// extended details. This field is optional and the data returned is not guaranteed
        /// to conform to any schema except that defined by the reason type.
        /// </summary>
        [JsonProperty(PropertyName = "details")]
        public V1StatusDetails Details { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// A human-readable description of the status of this operation.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Standard list metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonProperty(PropertyName = "metadata")]
        public V1ListMeta Metadata { get; set; }

        /// <summary>
        /// A machine-readable description of why this operation is in the &quot;Failure&quot; status.
        /// If this value is empty there is no information available. A Reason clarifies an
        /// HTTP status code but does not override it.
        /// </summary>
        [JsonProperty(PropertyName = "reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Status of the operation. One of: &quot;Success&quot; or &quot;Failure&quot;. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            Details?.Validate();
            Metadata?.Validate();
        }
    }
}
