// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the
        /// pod.
    /// </summary>
    public partial class V1AzureDiskVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1AzureDiskVolumeSource class.
        /// </summary>
        public V1AzureDiskVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1AzureDiskVolumeSource class.
        /// </summary>
        /// <param name="diskName">
        /// The Name of the data disk in the blob storage
        /// </param>
        /// <param name="diskURI">
        /// The URI the data disk in the blob storage
        /// </param>
        /// <param name="cachingMode">
        /// Host Caching mode: None, Read Only, Read Write.
        /// </param>
        /// <param name="fsType">
        /// Filesystem type to mount. Must be a filesystem type supported by the host
        /// operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if
        /// unspecified.
        /// </param>
        /// <param name="kind">
        /// Expected values Shared: multiple blob disks per storage account  Dedicated:
        /// single blob disk per storage account  Managed: azure managed data disk (only in
        /// managed availability set). defaults to shared
        /// </param>
        /// <param name="readOnlyProperty">
        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
        /// VolumeMounts.
        /// </param>
        public V1AzureDiskVolumeSource(string diskName, string diskURI, string cachingMode = null, string fsType = null, string kind = null, bool? readOnlyProperty = null)
        {
            CachingMode = cachingMode;
            DiskName = diskName;
            DiskURI = diskURI;
            FsType = fsType;
            Kind = kind;
            ReadOnlyProperty = readOnlyProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Host Caching mode: None, Read Only, Read Write.
        /// </summary>
        [JsonPropertyName("cachingMode")]
        public string CachingMode { get; set; }

        /// <summary>
        /// The Name of the data disk in the blob storage
        /// </summary>
        [JsonPropertyName("diskName")]
        public string DiskName { get; set; }

        /// <summary>
        /// The URI the data disk in the blob storage
        /// </summary>
        [JsonPropertyName("diskURI")]
        public string DiskURI { get; set; }

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by the host
        /// operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if
        /// unspecified.
        /// </summary>
        [JsonPropertyName("fsType")]
        public string FsType { get; set; }

        /// <summary>
        /// Expected values Shared: multiple blob disks per storage account  Dedicated:
        /// single blob disk per storage account  Managed: azure managed data disk (only in
        /// managed availability set). defaults to shared
        /// </summary>
        [JsonPropertyName("kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
        /// VolumeMounts.
        /// </summary>
        [JsonPropertyName("readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
