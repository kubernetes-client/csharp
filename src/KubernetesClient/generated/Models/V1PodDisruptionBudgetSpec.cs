// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
    /// </summary>
    public partial class V1PodDisruptionBudgetSpec
    {
        /// <summary>
        /// Initializes a new instance of the V1PodDisruptionBudgetSpec class.
        /// </summary>
        public V1PodDisruptionBudgetSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1PodDisruptionBudgetSpec class.
        /// </summary>
        /// <param name="maxUnavailable">
        /// An eviction is allowed if at most &quot;maxUnavailable&quot; pods selected by &quot;selector&quot;
        /// are unavailable after the eviction, i.e. even in absence of the evicted pod. For
        /// example, one can prevent all voluntary evictions by specifying 0. This is a
        /// mutually exclusive setting with &quot;minAvailable&quot;.
        /// </param>
        /// <param name="minAvailable">
        /// An eviction is allowed if at least &quot;minAvailable&quot; pods selected by &quot;selector&quot;
        /// will still be available after the eviction, i.e. even in the absence of the
        /// evicted pod.  So for example you can prevent all voluntary evictions by
        /// specifying &quot;100%&quot;.
        /// </param>
        /// <param name="selector">
        /// Label query over pods whose evictions are managed by the disruption budget. A
        /// null selector will match no pods, while an empty ({}) selector will select all
        /// pods within the namespace.
        /// </param>
        public V1PodDisruptionBudgetSpec(IntstrIntOrString maxUnavailable = null, IntstrIntOrString minAvailable = null, V1LabelSelector selector = null)
        {
            MaxUnavailable = maxUnavailable;
            MinAvailable = minAvailable;
            Selector = selector;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// An eviction is allowed if at most &quot;maxUnavailable&quot; pods selected by &quot;selector&quot;
        /// are unavailable after the eviction, i.e. even in absence of the evicted pod. For
        /// example, one can prevent all voluntary evictions by specifying 0. This is a
        /// mutually exclusive setting with &quot;minAvailable&quot;.
        /// </summary>
        [JsonProperty(PropertyName = "maxUnavailable")]
        public IntstrIntOrString MaxUnavailable { get; set; }

        /// <summary>
        /// An eviction is allowed if at least &quot;minAvailable&quot; pods selected by &quot;selector&quot;
        /// will still be available after the eviction, i.e. even in the absence of the
        /// evicted pod.  So for example you can prevent all voluntary evictions by
        /// specifying &quot;100%&quot;.
        /// </summary>
        [JsonProperty(PropertyName = "minAvailable")]
        public IntstrIntOrString MinAvailable { get; set; }

        /// <summary>
        /// Label query over pods whose evictions are managed by the disruption budget. A
        /// null selector will match no pods, while an empty ({}) selector will select all
        /// pods within the namespace.
        /// </summary>
        [JsonProperty(PropertyName = "selector")]
        public V1LabelSelector Selector { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            MaxUnavailable?.Validate();
            MinAvailable?.Validate();
            Selector?.Validate();
        }
    }
}
