// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// IngressServiceBackend references a Kubernetes Service as a Backend.
    /// </summary>
    public partial class V1IngressServiceBackend
    {
        /// <summary>
        /// Initializes a new instance of the V1IngressServiceBackend class.
        /// </summary>
        public V1IngressServiceBackend()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1IngressServiceBackend class.
        /// </summary>
        /// <param name="name">
        /// Name is the referenced service. The service must exist in the same namespace as
        /// the Ingress object.
        /// </param>
        /// <param name="port">
        /// Port of the referenced service. A port name or port number is required for a
        /// IngressServiceBackend.
        /// </param>
        public V1IngressServiceBackend(string name, V1ServiceBackendPort port = null)
        {
            Name = name;
            Port = port;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Name is the referenced service. The service must exist in the same namespace as
        /// the Ingress object.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Port of the referenced service. A port name or port number is required for a
        /// IngressServiceBackend.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public V1ServiceBackendPort Port { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            Port?.Validate();
        }
    }
}
