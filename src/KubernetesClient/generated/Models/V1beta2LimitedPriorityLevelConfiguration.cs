// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// LimitedPriorityLevelConfiguration specifies how to handle requests that are
        /// subject to limits. It addresses two issues:
        /// * How are requests for this priority level limited?
        /// * What should be done with requests that exceed the limit?
    /// </summary>
    public partial class V1beta2LimitedPriorityLevelConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the V1beta2LimitedPriorityLevelConfiguration class.
        /// </summary>
        public V1beta2LimitedPriorityLevelConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1beta2LimitedPriorityLevelConfiguration class.
        /// </summary>
        /// <param name="assuredConcurrencyShares">
        /// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a
        /// limit on the number of requests of this priority level that may be exeucting at
        /// a given time.  ACS must be a positive number. The server&apos;s concurrency limit
        /// (SCL) is divided among the concurrency-controlled priority levels in proportion
        /// to their assured concurrency shares. This produces the assured concurrency value
        /// (ACV) --- the number of requests that may be executing at a time --- for each
        /// such priority level:
        /// 
        /// ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
        /// 
        /// bigger numbers of ACS mean more reserved concurrent requests (at the expense of
        /// every other PL). This field has a default value of 30.
        /// </param>
        /// <param name="limitResponse">
        /// `limitResponse` indicates what to do with requests that can not be executed
        /// right now
        /// </param>
        public V1beta2LimitedPriorityLevelConfiguration(int? assuredConcurrencyShares = null, V1beta2LimitResponse limitResponse = null)
        {
            AssuredConcurrencyShares = assuredConcurrencyShares;
            LimitResponse = limitResponse;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a
        /// limit on the number of requests of this priority level that may be exeucting at
        /// a given time.  ACS must be a positive number. The server&apos;s concurrency limit
        /// (SCL) is divided among the concurrency-controlled priority levels in proportion
        /// to their assured concurrency shares. This produces the assured concurrency value
        /// (ACV) --- the number of requests that may be executing at a time --- for each
        /// such priority level:
        /// 
        /// ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
        /// 
        /// bigger numbers of ACS mean more reserved concurrent requests (at the expense of
        /// every other PL). This field has a default value of 30.
        /// </summary>
        [JsonPropertyName("assuredConcurrencyShares")]
        public int? AssuredConcurrencyShares { get; set; }

        /// <summary>
        /// `limitResponse` indicates what to do with requests that can not be executed
        /// right now
        /// </summary>
        [JsonPropertyName("limitResponse")]
        public V1beta2LimitResponse LimitResponse { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            LimitResponse?.Validate();
        }
    }
}
