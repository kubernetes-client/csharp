// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Webhook holds the configuration of the webhook
    /// </summary>
    public partial class V1alpha1Webhook
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1Webhook class.
        /// </summary>
        public V1alpha1Webhook()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1Webhook class.
        /// </summary>
        /// <param name="clientConfig">ClientConfig holds the connection
        /// parameters for the webhook required</param>
        /// <param name="throttle">Throttle holds the options for throttling
        /// the webhook</param>
        public V1alpha1Webhook(V1alpha1WebhookClientConfig clientConfig, V1alpha1WebhookThrottleConfig throttle = default(V1alpha1WebhookThrottleConfig))
        {
            ClientConfig = clientConfig;
            Throttle = throttle;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets clientConfig holds the connection parameters for the
        /// webhook required
        /// </summary>
        [JsonProperty(PropertyName = "clientConfig")]
        public V1alpha1WebhookClientConfig ClientConfig { get; set; }

        /// <summary>
        /// Gets or sets throttle holds the options for throttling the webhook
        /// </summary>
        [JsonProperty(PropertyName = "throttle")]
        public V1alpha1WebhookThrottleConfig Throttle { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ClientConfig == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ClientConfig");
            }
            if (ClientConfig != null)
            {
                ClientConfig.Validate();
            }
        }
    }
}
