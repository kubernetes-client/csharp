// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// ControllerRevision implements an immutable snapshot of state data. Clients are
        /// responsible for serializing and deserializing the objects that contain their
        /// internal state. Once a ControllerRevision has been successfully created, it can
        /// not be updated. The API Server will fail validation of all requests that attempt
        /// to mutate the Data field. ControllerRevisions may, however, be deleted. Note
        /// that, due to its use by both the DaemonSet and StatefulSet controllers for
        /// update and rollback, this object is beta. However, it may be subject to name and
        /// representation changes in future releases, and clients should not depend on its
        /// stability. It is primarily for internal use by controllers.
    /// </summary>
    public partial class V1ControllerRevision
    {
        /// <summary>
        /// Initializes a new instance of the V1ControllerRevision class.
        /// </summary>
        public V1ControllerRevision()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ControllerRevision class.
        /// </summary>
        /// <param name="revision">
        /// Revision indicates the revision of the state represented by Data.
        /// </param>
        /// <param name="apiVersion">
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </param>
        /// <param name="data">
        /// Data is the serialized representation of the state.
        /// </param>
        /// <param name="kind">
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="metadata">
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </param>
        public V1ControllerRevision(long revision, string apiVersion = null, object data = null, string kind = null, V1ObjectMeta metadata = null)
        {
            ApiVersion = apiVersion;
            Data = data;
            Kind = kind;
            Metadata = metadata;
            Revision = revision;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonPropertyName("apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Data is the serialized representation of the state.
        /// </summary>
        [JsonPropertyName("data")]
        public object Data { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonPropertyName("kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public V1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// Revision indicates the revision of the state represented by Data.
        /// </summary>
        [JsonPropertyName("revision")]
        public long Revision { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            Metadata?.Validate();
        }
    }
}
