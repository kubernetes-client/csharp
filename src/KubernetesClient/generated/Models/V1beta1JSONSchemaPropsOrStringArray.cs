// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string
    /// array.
    /// </summary>
    public partial class V1beta1JSONSchemaPropsOrStringArray
    {
        /// <summary>
        /// Initializes a new instance of the
        /// V1beta1JSONSchemaPropsOrStringArray class.
        /// </summary>
        public V1beta1JSONSchemaPropsOrStringArray()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// V1beta1JSONSchemaPropsOrStringArray class.
        /// </summary>
        public V1beta1JSONSchemaPropsOrStringArray(IList<string> property, V1beta1JSONSchemaProps schema)
        {
            Property = property;
            Schema = schema;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Property")]
        public IList<string> Property { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Schema")]
        public V1beta1JSONSchemaProps Schema { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Property == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Property");
            }
            if (Schema == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Schema");
            }
            if (Schema != null)
            {
                Schema.Validate();
            }
        }
    }
}
