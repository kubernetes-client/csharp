// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// PodOS defines the OS parameters of a pod.
    /// </summary>
    public partial class V1PodOS
    {
        /// <summary>
        /// Initializes a new instance of the V1PodOS class.
        /// </summary>
        public V1PodOS()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1PodOS class.
        /// </summary>
        /// <param name="name">
        /// Name is the name of the operating system. The currently supported values are
        /// linux and windows. Additional value may be defined in future and can be one of:
        /// https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
        /// Clients should expect to handle additional values and treat unrecognized values
        /// in this field as os: null
        /// </param>
        public V1PodOS(string name)
        {
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Name is the name of the operating system. The currently supported values are
        /// linux and windows. Additional value may be defined in future and can be one of:
        /// https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration
        /// Clients should expect to handle additional values and treat unrecognized values
        /// in this field as os: null
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
