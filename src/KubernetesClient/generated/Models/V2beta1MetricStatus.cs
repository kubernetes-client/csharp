// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// MetricStatus describes the last-read state of a single metric.
    /// </summary>
    public partial class V2beta1MetricStatus
    {
        /// <summary>
        /// Initializes a new instance of the V2beta1MetricStatus class.
        /// </summary>
        public V2beta1MetricStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V2beta1MetricStatus class.
        /// </summary>
        /// <param name="type">
        /// type is the type of metric source.  It will be one of &quot;ContainerResource&quot;,
        /// &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each corresponds to a matching field
        /// in the object. Note: &quot;ContainerResource&quot; type is available on when the
        /// feature-gate HPAContainerMetrics is enabled
        /// </param>
        /// <param name="containerResource">
        /// container resource refers to a resource metric (such as those specified in
        /// requests and limits) known to Kubernetes describing a single container in each
        /// pod in the current scale target (e.g. CPU or memory). Such metrics are built in
        /// to Kubernetes, and have special scaling options on top of those available to
        /// normal per-pod metrics using the &quot;pods&quot; source.
        /// </param>
        /// <param name="external">
        /// external refers to a global metric that is not associated with any Kubernetes
        /// object. It allows autoscaling based on information coming from components
        /// running outside of cluster (for example length of queue in cloud messaging
        /// service, or QPS from loadbalancer running outside of cluster).
        /// </param>
        /// <param name="objectProperty">
        /// object refers to a metric describing a single kubernetes object (for example,
        /// hits-per-second on an Ingress object).
        /// </param>
        /// <param name="pods">
        /// pods refers to a metric describing each pod in the current scale target (for
        /// example, transactions-processed-per-second).  The values will be averaged
        /// together before being compared to the target value.
        /// </param>
        /// <param name="resource">
        /// resource refers to a resource metric (such as those specified in requests and
        /// limits) known to Kubernetes describing each pod in the current scale target
        /// (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        /// scaling options on top of those available to normal per-pod metrics using the
        /// &quot;pods&quot; source.
        /// </param>
        public V2beta1MetricStatus(string type, V2beta1ContainerResourceMetricStatus containerResource = null, V2beta1ExternalMetricStatus external = null, V2beta1ObjectMetricStatus objectProperty = null, V2beta1PodsMetricStatus pods = null, V2beta1ResourceMetricStatus resource = null)
        {
            ContainerResource = containerResource;
            External = external;
            ObjectProperty = objectProperty;
            Pods = pods;
            Resource = resource;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// container resource refers to a resource metric (such as those specified in
        /// requests and limits) known to Kubernetes describing a single container in each
        /// pod in the current scale target (e.g. CPU or memory). Such metrics are built in
        /// to Kubernetes, and have special scaling options on top of those available to
        /// normal per-pod metrics using the &quot;pods&quot; source.
        /// </summary>
        [JsonPropertyName("containerResource")]
        public V2beta1ContainerResourceMetricStatus ContainerResource { get; set; }

        /// <summary>
        /// external refers to a global metric that is not associated with any Kubernetes
        /// object. It allows autoscaling based on information coming from components
        /// running outside of cluster (for example length of queue in cloud messaging
        /// service, or QPS from loadbalancer running outside of cluster).
        /// </summary>
        [JsonPropertyName("external")]
        public V2beta1ExternalMetricStatus External { get; set; }

        /// <summary>
        /// object refers to a metric describing a single kubernetes object (for example,
        /// hits-per-second on an Ingress object).
        /// </summary>
        [JsonPropertyName("object")]
        public V2beta1ObjectMetricStatus ObjectProperty { get; set; }

        /// <summary>
        /// pods refers to a metric describing each pod in the current scale target (for
        /// example, transactions-processed-per-second).  The values will be averaged
        /// together before being compared to the target value.
        /// </summary>
        [JsonPropertyName("pods")]
        public V2beta1PodsMetricStatus Pods { get; set; }

        /// <summary>
        /// resource refers to a resource metric (such as those specified in requests and
        /// limits) known to Kubernetes describing each pod in the current scale target
        /// (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special
        /// scaling options on top of those available to normal per-pod metrics using the
        /// &quot;pods&quot; source.
        /// </summary>
        [JsonPropertyName("resource")]
        public V2beta1ResourceMetricStatus Resource { get; set; }

        /// <summary>
        /// type is the type of metric source.  It will be one of &quot;ContainerResource&quot;,
        /// &quot;External&quot;, &quot;Object&quot;, &quot;Pods&quot; or &quot;Resource&quot;, each corresponds to a matching field
        /// in the object. Note: &quot;ContainerResource&quot; type is available on when the
        /// feature-gate HPAContainerMetrics is enabled
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            ContainerResource?.Validate();
            External?.Validate();
            ObjectProperty?.Validate();
            Pods?.Validate();
            Resource?.Validate();
        }
    }
}
