// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Probe describes a health check to be performed against a container to determine
        /// whether it is alive or ready to receive traffic.
    /// </summary>
    public partial class V1Probe
    {
        /// <summary>
        /// Initializes a new instance of the V1Probe class.
        /// </summary>
        public V1Probe()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1Probe class.
        /// </summary>
        /// <param name="exec">
        /// One and only one of the following should be specified. Exec specifies the action
        /// to take.
        /// </param>
        /// <param name="failureThreshold">
        /// Minimum consecutive failures for the probe to be considered failed after having
        /// succeeded. Defaults to 3. Minimum value is 1.
        /// </param>
        /// <param name="httpGet">
        /// HTTPGet specifies the http request to perform.
        /// </param>
        /// <param name="initialDelaySeconds">
        /// Number of seconds after the container has started before liveness probes are
        /// initiated. More info:
        /// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </param>
        /// <param name="periodSeconds">
        /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
        /// value is 1.
        /// </param>
        /// <param name="successThreshold">
        /// Minimum consecutive successes for the probe to be considered successful after
        /// having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value
        /// is 1.
        /// </param>
        /// <param name="tcpSocket">
        /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        /// </param>
        /// <param name="terminationGracePeriodSeconds">
        /// Optional duration in seconds the pod needs to terminate gracefully upon probe
        /// failure. The grace period is the duration in seconds after the processes running
        /// in the pod are sent a termination signal and the time when the processes are
        /// forcibly halted with a kill signal. Set this value longer than the expected
        /// cleanup time for your process. If this value is nil, the pod&apos;s
        /// terminationGracePeriodSeconds will be used. Otherwise, this value overrides the
        /// value provided by the pod spec. Value must be non-negative integer. The value
        /// zero indicates stop immediately via the kill signal (no opportunity to shut
        /// down). This is a beta field and requires enabling ProbeTerminationGracePeriod
        /// feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if
        /// unset.
        /// </param>
        /// <param name="timeoutSeconds">
        /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum
        /// value is 1. More info:
        /// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </param>
        public V1Probe(V1ExecAction exec = null, int? failureThreshold = null, V1HTTPGetAction httpGet = null, int? initialDelaySeconds = null, int? periodSeconds = null, int? successThreshold = null, V1TCPSocketAction tcpSocket = null, long? terminationGracePeriodSeconds = null, int? timeoutSeconds = null)
        {
            Exec = exec;
            FailureThreshold = failureThreshold;
            HttpGet = httpGet;
            InitialDelaySeconds = initialDelaySeconds;
            PeriodSeconds = periodSeconds;
            SuccessThreshold = successThreshold;
            TcpSocket = tcpSocket;
            TerminationGracePeriodSeconds = terminationGracePeriodSeconds;
            TimeoutSeconds = timeoutSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// One and only one of the following should be specified. Exec specifies the action
        /// to take.
        /// </summary>
        [JsonProperty(PropertyName = "exec")]
        public V1ExecAction Exec { get; set; }

        /// <summary>
        /// Minimum consecutive failures for the probe to be considered failed after having
        /// succeeded. Defaults to 3. Minimum value is 1.
        /// </summary>
        [JsonProperty(PropertyName = "failureThreshold")]
        public int? FailureThreshold { get; set; }

        /// <summary>
        /// HTTPGet specifies the http request to perform.
        /// </summary>
        [JsonProperty(PropertyName = "httpGet")]
        public V1HTTPGetAction HttpGet { get; set; }

        /// <summary>
        /// Number of seconds after the container has started before liveness probes are
        /// initiated. More info:
        /// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        [JsonProperty(PropertyName = "initialDelaySeconds")]
        public int? InitialDelaySeconds { get; set; }

        /// <summary>
        /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
        /// value is 1.
        /// </summary>
        [JsonProperty(PropertyName = "periodSeconds")]
        public int? PeriodSeconds { get; set; }

        /// <summary>
        /// Minimum consecutive successes for the probe to be considered successful after
        /// having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value
        /// is 1.
        /// </summary>
        [JsonProperty(PropertyName = "successThreshold")]
        public int? SuccessThreshold { get; set; }

        /// <summary>
        /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        /// </summary>
        [JsonProperty(PropertyName = "tcpSocket")]
        public V1TCPSocketAction TcpSocket { get; set; }

        /// <summary>
        /// Optional duration in seconds the pod needs to terminate gracefully upon probe
        /// failure. The grace period is the duration in seconds after the processes running
        /// in the pod are sent a termination signal and the time when the processes are
        /// forcibly halted with a kill signal. Set this value longer than the expected
        /// cleanup time for your process. If this value is nil, the pod&apos;s
        /// terminationGracePeriodSeconds will be used. Otherwise, this value overrides the
        /// value provided by the pod spec. Value must be non-negative integer. The value
        /// zero indicates stop immediately via the kill signal (no opportunity to shut
        /// down). This is a beta field and requires enabling ProbeTerminationGracePeriod
        /// feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if
        /// unset.
        /// </summary>
        [JsonProperty(PropertyName = "terminationGracePeriodSeconds")]
        public long? TerminationGracePeriodSeconds { get; set; }

        /// <summary>
        /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum
        /// value is 1. More info:
        /// https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        [JsonProperty(PropertyName = "timeoutSeconds")]
        public int? TimeoutSeconds { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            Exec?.Validate();
            HttpGet?.Validate();
            TcpSocket?.Validate();
        }
    }
}
