// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// HTTPIngressRuleValue is a list of http selectors pointing to backends. In the
        /// example: http://&lt;host&gt;/&lt;path&gt;?&lt;searchpart&gt; -&gt; backend where where parts of the
        /// url correspond to RFC 3986, this resource will be used to match against
        /// everything after the last &apos;/&apos; and before the first &apos;?&apos; or &apos;#&apos;.
    /// </summary>
    public partial class V1HTTPIngressRuleValue
    {
        /// <summary>
        /// Initializes a new instance of the V1HTTPIngressRuleValue class.
        /// </summary>
        public V1HTTPIngressRuleValue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1HTTPIngressRuleValue class.
        /// </summary>
        /// <param name="paths">
        /// A collection of paths that map requests to backends.
        /// </param>
        public V1HTTPIngressRuleValue(IList<V1HTTPIngressPath> paths)
        {
            Paths = paths;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// A collection of paths that map requests to backends.
        /// </summary>
        [JsonProperty(PropertyName = "paths")]
        public IList<V1HTTPIngressPath> Paths { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Paths != null){
                foreach(var obj in Paths)
                {
                    obj.Validate();
                }
            }
        }
    }
}
