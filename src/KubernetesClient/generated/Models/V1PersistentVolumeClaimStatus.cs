// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
    /// </summary>
    public partial class V1PersistentVolumeClaimStatus
    {
        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeClaimStatus class.
        /// </summary>
        public V1PersistentVolumeClaimStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeClaimStatus class.
        /// </summary>
        /// <param name="accessModes">
        /// AccessModes contains the actual access modes the volume backing the PVC has.
        /// More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </param>
        /// <param name="allocatedResources">
        /// The storage resource within AllocatedResources tracks the capacity allocated to
        /// a PVC. It may be larger than the actual capacity when a volume expansion
        /// operation is requested. For storage quota, the larger value from
        /// allocatedResources and PVC.spec.resources is used. If allocatedResources is not
        /// set, PVC.spec.resources alone is used for quota calculation. If a volume
        /// expansion capacity request is lowered, allocatedResources is only lowered if
        /// there are no expansion operations in progress and if the actual volume capacity
        /// is equal or lower than the requested capacity. This is an alpha field and
        /// requires enabling RecoverVolumeExpansionFailure feature.
        /// </param>
        /// <param name="capacity">
        /// Represents the actual resources of the underlying volume.
        /// </param>
        /// <param name="conditions">
        /// Current Condition of persistent volume claim. If underlying persistent volume is
        /// being resized then the Condition will be set to &apos;ResizeStarted&apos;.
        /// </param>
        /// <param name="phase">
        /// Phase represents the current phase of PersistentVolumeClaim.
        /// 
        /// Possible enum values:
        /// - `&quot;Bound&quot;` used for PersistentVolumeClaims that are bound
        /// - `&quot;Lost&quot;` used for PersistentVolumeClaims that lost their underlying
        /// PersistentVolume. The claim was bound to a PersistentVolume and this volume does
        /// not exist any longer and all data on it was lost.
        /// - `&quot;Pending&quot;` used for PersistentVolumeClaims that are not yet bound
        /// </param>
        /// <param name="resizeStatus">
        /// ResizeStatus stores status of resize operation. ResizeStatus is not set by
        /// default but when expansion is complete resizeStatus is set to empty string by
        /// resize controller or kubelet. This is an alpha field and requires enabling
        /// RecoverVolumeExpansionFailure feature.
        /// </param>
        public V1PersistentVolumeClaimStatus(IList<string> accessModes = null, IDictionary<string, ResourceQuantity> allocatedResources = null, IDictionary<string, ResourceQuantity> capacity = null, IList<V1PersistentVolumeClaimCondition> conditions = null, string phase = null, string resizeStatus = null)
        {
            AccessModes = accessModes;
            AllocatedResources = allocatedResources;
            Capacity = capacity;
            Conditions = conditions;
            Phase = phase;
            ResizeStatus = resizeStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// AccessModes contains the actual access modes the volume backing the PVC has.
        /// More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        [JsonPropertyName("accessModes")]
        public IList<string> AccessModes { get; set; }

        /// <summary>
        /// The storage resource within AllocatedResources tracks the capacity allocated to
        /// a PVC. It may be larger than the actual capacity when a volume expansion
        /// operation is requested. For storage quota, the larger value from
        /// allocatedResources and PVC.spec.resources is used. If allocatedResources is not
        /// set, PVC.spec.resources alone is used for quota calculation. If a volume
        /// expansion capacity request is lowered, allocatedResources is only lowered if
        /// there are no expansion operations in progress and if the actual volume capacity
        /// is equal or lower than the requested capacity. This is an alpha field and
        /// requires enabling RecoverVolumeExpansionFailure feature.
        /// </summary>
        [JsonPropertyName("allocatedResources")]
        public IDictionary<string, ResourceQuantity> AllocatedResources { get; set; }

        /// <summary>
        /// Represents the actual resources of the underlying volume.
        /// </summary>
        [JsonPropertyName("capacity")]
        public IDictionary<string, ResourceQuantity> Capacity { get; set; }

        /// <summary>
        /// Current Condition of persistent volume claim. If underlying persistent volume is
        /// being resized then the Condition will be set to &apos;ResizeStarted&apos;.
        /// </summary>
        [JsonPropertyName("conditions")]
        public IList<V1PersistentVolumeClaimCondition> Conditions { get; set; }

        /// <summary>
        /// Phase represents the current phase of PersistentVolumeClaim.
        /// 
        /// Possible enum values:
        /// - `&quot;Bound&quot;` used for PersistentVolumeClaims that are bound
        /// - `&quot;Lost&quot;` used for PersistentVolumeClaims that lost their underlying
        /// PersistentVolume. The claim was bound to a PersistentVolume and this volume does
        /// not exist any longer and all data on it was lost.
        /// - `&quot;Pending&quot;` used for PersistentVolumeClaims that are not yet bound
        /// </summary>
        [JsonPropertyName("phase")]
        public string Phase { get; set; }

        /// <summary>
        /// ResizeStatus stores status of resize operation. ResizeStatus is not set by
        /// default but when expansion is complete resizeStatus is set to empty string by
        /// resize controller or kubelet. This is an alpha field and requires enabling
        /// RecoverVolumeExpansionFailure feature.
        /// </summary>
        [JsonPropertyName("resizeStatus")]
        public string ResizeStatus { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Conditions != null){
                foreach(var obj in Conditions)
                {
                    obj.Validate();
                }
            }
        }
    }
}
