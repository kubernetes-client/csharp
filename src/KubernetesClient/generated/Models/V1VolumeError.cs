// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// VolumeError captures an error encountered during a volume operation.
    /// </summary>
    public partial class V1VolumeError
    {
        /// <summary>
        /// Initializes a new instance of the V1VolumeError class.
        /// </summary>
        public V1VolumeError()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1VolumeError class.
        /// </summary>
        /// <param name="message">
        /// String detailing the error encountered during Attach or Detach operation. This
        /// string may be logged, so it should not contain sensitive information.
        /// </param>
        /// <param name="time">
        /// Time the error was encountered.
        /// </param>
        public V1VolumeError(string message = null, System.DateTime? time = null)
        {
            Message = message;
            Time = time;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// String detailing the error encountered during Attach or Detach operation. This
        /// string may be logged, so it should not contain sensitive information.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Time the error was encountered.
        /// </summary>
        [JsonProperty(PropertyName = "time")]
        public System.DateTime? Time { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
