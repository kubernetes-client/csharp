// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// PersistentVolumeStatus is the current status of a persistent volume.
    /// </summary>
    public partial class V1PersistentVolumeStatus
    {
        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeStatus class.
        /// </summary>
        public V1PersistentVolumeStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeStatus class.
        /// </summary>
        /// <param name="message">
        /// A human-readable message indicating details about why the volume is in this
        /// state.
        /// </param>
        /// <param name="phase">
        /// Phase indicates if a volume is available, bound to a claim, or released by a
        /// claim. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
        /// 
        /// Possible enum values:
        /// - `&quot;Available&quot;` used for PersistentVolumes that are not yet bound Available
        /// volumes are held by the binder and matched to PersistentVolumeClaims
        /// - `&quot;Bound&quot;` used for PersistentVolumes that are bound
        /// - `&quot;Failed&quot;` used for PersistentVolumes that failed to be correctly recycled or
        /// deleted after being released from a claim
        /// - `&quot;Pending&quot;` used for PersistentVolumes that are not available
        /// - `&quot;Released&quot;` used for PersistentVolumes where the bound PersistentVolumeClaim
        /// was deleted released volumes must be recycled before becoming available again
        /// this phase is used by the persistent volume claim binder to signal to another
        /// process to reclaim the resource
        /// </param>
        /// <param name="reason">
        /// Reason is a brief CamelCase string that describes any failure and is meant for
        /// machine parsing and tidy display in the CLI.
        /// </param>
        public V1PersistentVolumeStatus(string message = null, string phase = null, string reason = null)
        {
            Message = message;
            Phase = phase;
            Reason = reason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// A human-readable message indicating details about why the volume is in this
        /// state.
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Phase indicates if a volume is available, bound to a claim, or released by a
        /// claim. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
        /// 
        /// Possible enum values:
        /// - `&quot;Available&quot;` used for PersistentVolumes that are not yet bound Available
        /// volumes are held by the binder and matched to PersistentVolumeClaims
        /// - `&quot;Bound&quot;` used for PersistentVolumes that are bound
        /// - `&quot;Failed&quot;` used for PersistentVolumes that failed to be correctly recycled or
        /// deleted after being released from a claim
        /// - `&quot;Pending&quot;` used for PersistentVolumes that are not available
        /// - `&quot;Released&quot;` used for PersistentVolumes where the bound PersistentVolumeClaim
        /// was deleted released volumes must be recycled before becoming available again
        /// this phase is used by the persistent volume claim binder to signal to another
        /// process to reclaim the resource
        /// </summary>
        [JsonPropertyName("phase")]
        public string Phase { get; set; }

        /// <summary>
        /// Reason is a brief CamelCase string that describes any failure and is meant for
        /// machine parsing and tidy display in the CLI.
        /// </summary>
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
