// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// NetworkPolicyEgressRule describes a particular set of traffic that is allowed
        /// out of pods matched by a NetworkPolicySpec&apos;s podSelector. The traffic must match
        /// both ports and to. This type is beta-level in 1.8
    /// </summary>
    public partial class V1NetworkPolicyEgressRule
    {
        /// <summary>
        /// Initializes a new instance of the V1NetworkPolicyEgressRule class.
        /// </summary>
        public V1NetworkPolicyEgressRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1NetworkPolicyEgressRule class.
        /// </summary>
        /// <param name="ports">
        /// List of destination ports for outgoing traffic. Each item in this list is
        /// combined using a logical OR. If this field is empty or missing, this rule
        /// matches all ports (traffic not restricted by port). If this field is present and
        /// contains at least one item, then this rule allows traffic only if the traffic
        /// matches at least one port in the list.
        /// </param>
        /// <param name="to">
        /// List of destinations for outgoing traffic of pods selected for this rule. Items
        /// in this list are combined using a logical OR operation. If this field is empty
        /// or missing, this rule matches all destinations (traffic not restricted by
        /// destination). If this field is present and contains at least one item, this rule
        /// allows traffic only if the traffic matches at least one item in the to list.
        /// </param>
        public V1NetworkPolicyEgressRule(IList<V1NetworkPolicyPort> ports = null, IList<V1NetworkPolicyPeer> to = null)
        {
            Ports = ports;
            To = to;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// List of destination ports for outgoing traffic. Each item in this list is
        /// combined using a logical OR. If this field is empty or missing, this rule
        /// matches all ports (traffic not restricted by port). If this field is present and
        /// contains at least one item, then this rule allows traffic only if the traffic
        /// matches at least one port in the list.
        /// </summary>
        [JsonProperty(PropertyName = "ports")]
        public IList<V1NetworkPolicyPort> Ports { get; set; }

        /// <summary>
        /// List of destinations for outgoing traffic of pods selected for this rule. Items
        /// in this list are combined using a logical OR operation. If this field is empty
        /// or missing, this rule matches all destinations (traffic not restricted by
        /// destination). If this field is present and contains at least one item, this rule
        /// allows traffic only if the traffic matches at least one item in the to list.
        /// </summary>
        [JsonProperty(PropertyName = "to")]
        public IList<V1NetworkPolicyPeer> To { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Ports != null){
                foreach(var obj in Ports)
                {
                    obj.Validate();
                }
            }
            if (To != null){
                foreach(var obj in To)
                {
                    obj.Validate();
                }
            }
        }
    }
}
