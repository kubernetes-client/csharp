// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// Event is a report of an event somewhere in the cluster.  Events have a limited
        /// retention time and triggers and messages may evolve with time.  Event consumers
        /// should not rely on the timing of an event with a given Reason reflecting a
        /// consistent underlying trigger, or the continued existence of events with that
        /// Reason.  Events should be treated as informative, best-effort, supplemental
        /// data.
    /// </summary>
    public partial class Corev1Event
    {
        /// <summary>
        /// Initializes a new instance of the Corev1Event class.
        /// </summary>
        public Corev1Event()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Corev1Event class.
        /// </summary>
        /// <param name="involvedObject">
        /// The object that this event is about.
        /// </param>
        /// <param name="metadata">
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </param>
        /// <param name="action">
        /// What action was taken/failed regarding to the Regarding object.
        /// </param>
        /// <param name="apiVersion">
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </param>
        /// <param name="count">
        /// The number of times this event has occurred.
        /// </param>
        /// <param name="eventTime">
        /// Time when this Event was first observed.
        /// </param>
        /// <param name="firstTimestamp">
        /// The time at which the event was first recorded. (Time of server receipt is in
        /// TypeMeta.)
        /// </param>
        /// <param name="kind">
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="lastTimestamp">
        /// The time at which the most recent occurrence of this event was recorded.
        /// </param>
        /// <param name="message">
        /// A human-readable description of the status of this operation.
        /// </param>
        /// <param name="reason">
        /// This should be a short, machine understandable string that gives the reason for
        /// the transition into the object&apos;s current status.
        /// </param>
        /// <param name="related">
        /// Optional secondary object for more complex actions.
        /// </param>
        /// <param name="reportingComponent">
        /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
        /// </param>
        /// <param name="reportingInstance">
        /// ID of the controller instance, e.g. `kubelet-xyzf`.
        /// </param>
        /// <param name="series">
        /// Data about the Event series this event represents or nil if it&apos;s a singleton
        /// Event.
        /// </param>
        /// <param name="source">
        /// The component reporting this event. Should be a short machine understandable
        /// string.
        /// </param>
        /// <param name="type">
        /// Type of this event (Normal, Warning), new types could be added in the future
        /// </param>
        public Corev1Event(V1ObjectReference involvedObject, V1ObjectMeta metadata, string action = null, string apiVersion = null, int? count = null, System.DateTime? eventTime = null, System.DateTime? firstTimestamp = null, string kind = null, System.DateTime? lastTimestamp = null, string message = null, string reason = null, V1ObjectReference related = null, string reportingComponent = null, string reportingInstance = null, Corev1EventSeries series = null, V1EventSource source = null, string type = null)
        {
            Action = action;
            ApiVersion = apiVersion;
            Count = count;
            EventTime = eventTime;
            FirstTimestamp = firstTimestamp;
            InvolvedObject = involvedObject;
            Kind = kind;
            LastTimestamp = lastTimestamp;
            Message = message;
            Metadata = metadata;
            Reason = reason;
            Related = related;
            ReportingComponent = reportingComponent;
            ReportingInstance = reportingInstance;
            Series = series;
            Source = source;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// What action was taken/failed regarding to the Regarding object.
        /// </summary>
        [JsonPropertyName("action")]
        public string Action { get; set; }

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonPropertyName("apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// The number of times this event has occurred.
        /// </summary>
        [JsonPropertyName("count")]
        public int? Count { get; set; }

        /// <summary>
        /// Time when this Event was first observed.
        /// </summary>
        [JsonPropertyName("eventTime")]
        public System.DateTime? EventTime { get; set; }

        /// <summary>
        /// The time at which the event was first recorded. (Time of server receipt is in
        /// TypeMeta.)
        /// </summary>
        [JsonPropertyName("firstTimestamp")]
        public System.DateTime? FirstTimestamp { get; set; }

        /// <summary>
        /// The object that this event is about.
        /// </summary>
        [JsonPropertyName("involvedObject")]
        public V1ObjectReference InvolvedObject { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonPropertyName("kind")]
        public string Kind { get; set; }

        /// <summary>
        /// The time at which the most recent occurrence of this event was recorded.
        /// </summary>
        [JsonPropertyName("lastTimestamp")]
        public System.DateTime? LastTimestamp { get; set; }

        /// <summary>
        /// A human-readable description of the status of this operation.
        /// </summary>
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public V1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// This should be a short, machine understandable string that gives the reason for
        /// the transition into the object&apos;s current status.
        /// </summary>
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Optional secondary object for more complex actions.
        /// </summary>
        [JsonPropertyName("related")]
        public V1ObjectReference Related { get; set; }

        /// <summary>
        /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
        /// </summary>
        [JsonPropertyName("reportingComponent")]
        public string ReportingComponent { get; set; }

        /// <summary>
        /// ID of the controller instance, e.g. `kubelet-xyzf`.
        /// </summary>
        [JsonPropertyName("reportingInstance")]
        public string ReportingInstance { get; set; }

        /// <summary>
        /// Data about the Event series this event represents or nil if it&apos;s a singleton
        /// Event.
        /// </summary>
        [JsonPropertyName("series")]
        public Corev1EventSeries Series { get; set; }

        /// <summary>
        /// The component reporting this event. Should be a short machine understandable
        /// string.
        /// </summary>
        [JsonPropertyName("source")]
        public V1EventSource Source { get; set; }

        /// <summary>
        /// Type of this event (Normal, Warning), new types could be added in the future
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InvolvedObject == null)
            {
                throw new ArgumentNullException("InvolvedObject");    
            }
            if (Metadata == null)
            {
                throw new ArgumentNullException("Metadata");    
            }
            InvolvedObject?.Validate();
            Metadata?.Validate();
            Related?.Validate();
            Series?.Validate();
            Source?.Validate();
        }
    }
}
