// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// IngressSpec describes the Ingress the user wishes to exist.
    /// </summary>
    public partial class Networkingv1beta1IngressSpec
    {
        /// <summary>
        /// Initializes a new instance of the Networkingv1beta1IngressSpec class.
        /// </summary>
        public Networkingv1beta1IngressSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Networkingv1beta1IngressSpec class.
        /// </summary>
        /// <param name="backend">
        /// A default backend capable of servicing requests that don't match any rule. At
        /// least one of 'backend' or 'rules' must be specified. This field is optional to
        /// allow the loadbalancer controller or defaulting logic to specify a global
        /// default.
        /// </param>
        /// <param name="ingressClassName">
        /// IngressClassName is the name of the IngressClass cluster resource. The
        /// associated IngressClass defines which controller will implement the resource.
        /// This replaces the deprecated `kubernetes.io/ingress.class` annotation. For
        /// backwards compatibility, when that annotation is set, it must be given
        /// precedence over this field. The controller may emit a warning if the field and
        /// annotation have different values. Implementations of this API should ignore
        /// Ingresses without a class specified. An IngressClass resource may be marked as
        /// default, which can be used to set a default value for this field. For more
        /// information, refer to the IngressClass documentation.
        /// </param>
        /// <param name="rules">
        /// A list of host rules used to configure the Ingress. If unspecified, or no rule
        /// matches, all traffic is sent to the default backend.
        /// </param>
        /// <param name="tls">
        /// TLS configuration. Currently the Ingress only supports a single TLS port, 443.
        /// If multiple members of this list specify different hosts, they will be
        /// multiplexed on the same port according to the hostname specified through the SNI
        /// TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        /// </param>
        public Networkingv1beta1IngressSpec(Networkingv1beta1IngressBackend backend = null, string ingressClassName = null, IList<Networkingv1beta1IngressRule> rules = null, IList<Networkingv1beta1IngressTLS> tls = null)
        {
            Backend = backend;
            IngressClassName = ingressClassName;
            Rules = rules;
            Tls = tls;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// A default backend capable of servicing requests that don't match any rule. At
        /// least one of 'backend' or 'rules' must be specified. This field is optional to
        /// allow the loadbalancer controller or defaulting logic to specify a global
        /// default.
        /// </summary>
        [JsonProperty(PropertyName = "backend")]
        public Networkingv1beta1IngressBackend Backend { get; set; }

        /// <summary>
        /// IngressClassName is the name of the IngressClass cluster resource. The
        /// associated IngressClass defines which controller will implement the resource.
        /// This replaces the deprecated `kubernetes.io/ingress.class` annotation. For
        /// backwards compatibility, when that annotation is set, it must be given
        /// precedence over this field. The controller may emit a warning if the field and
        /// annotation have different values. Implementations of this API should ignore
        /// Ingresses without a class specified. An IngressClass resource may be marked as
        /// default, which can be used to set a default value for this field. For more
        /// information, refer to the IngressClass documentation.
        /// </summary>
        [JsonProperty(PropertyName = "ingressClassName")]
        public string IngressClassName { get; set; }

        /// <summary>
        /// A list of host rules used to configure the Ingress. If unspecified, or no rule
        /// matches, all traffic is sent to the default backend.
        /// </summary>
        [JsonProperty(PropertyName = "rules")]
        public IList<Networkingv1beta1IngressRule> Rules { get; set; }

        /// <summary>
        /// TLS configuration. Currently the Ingress only supports a single TLS port, 443.
        /// If multiple members of this list specify different hosts, they will be
        /// multiplexed on the same port according to the hostname specified through the SNI
        /// TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        /// </summary>
        [JsonProperty(PropertyName = "tls")]
        public IList<Networkingv1beta1IngressTLS> Tls { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            Backend?.Validate();
            foreach(var obj in Rules)
            {
                obj.Validate();
            }
            foreach(var obj in Tls)
            {
                obj.Validate();
            }
        }
    }
}
