// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Defines a set of pods (namely those matching the labelSelector relative to the
        /// given namespace(s)) that this pod should be co-located (affinity) or not
        /// co-located (anti-affinity) with, where co-located is defined as running on a
        /// node whose value of the label with key &lt;topologyKey&gt; matches that of any node on
        /// which a pod of the set of pods is running
    /// </summary>
    public partial class V1PodAffinityTerm
    {
        /// <summary>
        /// Initializes a new instance of the V1PodAffinityTerm class.
        /// </summary>
        public V1PodAffinityTerm()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1PodAffinityTerm class.
        /// </summary>
        /// <param name="topologyKey">
        /// This pod should be co-located (affinity) or not co-located (anti-affinity) with
        /// the pods matching the labelSelector in the specified namespaces, where
        /// co-located is defined as running on a node whose value of the label with key
        /// topologyKey matches that of any node on which any of the selected pods is
        /// running. Empty topologyKey is not allowed.
        /// </param>
        /// <param name="labelSelector">
        /// A label query over a set of resources, in this case pods.
        /// </param>
        /// <param name="namespaceSelector">
        /// A label query over the set of namespaces that the term applies to. The term is
        /// applied to the union of the namespaces selected by this field and the ones
        /// listed in the namespaces field. null selector and null or empty namespaces list
        /// means &quot;this pod&apos;s namespace&quot;. An empty selector ({}) matches all namespaces.
        /// This field is beta-level and is only honored when PodAffinityNamespaceSelector
        /// feature is enabled.
        /// </param>
        /// <param name="namespaces">
        /// namespaces specifies a static list of namespace names that the term applies to.
        /// The term is applied to the union of the namespaces listed in this field and the
        /// ones selected by namespaceSelector. null or empty namespaces list and null
        /// namespaceSelector means &quot;this pod&apos;s namespace&quot;
        /// </param>
        public V1PodAffinityTerm(string topologyKey, V1LabelSelector labelSelector = null, V1LabelSelector namespaceSelector = null, IList<string> namespaces = null)
        {
            LabelSelector = labelSelector;
            NamespaceSelector = namespaceSelector;
            Namespaces = namespaces;
            TopologyKey = topologyKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// A label query over a set of resources, in this case pods.
        /// </summary>
        [JsonProperty(PropertyName = "labelSelector")]
        public V1LabelSelector LabelSelector { get; set; }

        /// <summary>
        /// A label query over the set of namespaces that the term applies to. The term is
        /// applied to the union of the namespaces selected by this field and the ones
        /// listed in the namespaces field. null selector and null or empty namespaces list
        /// means &quot;this pod&apos;s namespace&quot;. An empty selector ({}) matches all namespaces.
        /// This field is beta-level and is only honored when PodAffinityNamespaceSelector
        /// feature is enabled.
        /// </summary>
        [JsonProperty(PropertyName = "namespaceSelector")]
        public V1LabelSelector NamespaceSelector { get; set; }

        /// <summary>
        /// namespaces specifies a static list of namespace names that the term applies to.
        /// The term is applied to the union of the namespaces listed in this field and the
        /// ones selected by namespaceSelector. null or empty namespaces list and null
        /// namespaceSelector means &quot;this pod&apos;s namespace&quot;
        /// </summary>
        [JsonProperty(PropertyName = "namespaces")]
        public IList<string> Namespaces { get; set; }

        /// <summary>
        /// This pod should be co-located (affinity) or not co-located (anti-affinity) with
        /// the pods matching the labelSelector in the specified namespaces, where
        /// co-located is defined as running on a node whose value of the label with key
        /// topologyKey matches that of any node on which any of the selected pods is
        /// running. Empty topologyKey is not allowed.
        /// </summary>
        [JsonProperty(PropertyName = "topologyKey")]
        public string TopologyKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            LabelSelector?.Validate();
            NamespaceSelector?.Validate();
        }
    }
}
