// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// JSONSchemaProps is a JSON-Schema following Specification Draft 4
    /// (http://json-schema.org/).
    /// </summary>
    public partial class V1beta1JSONSchemaProps
    {
        /// <summary>
        /// Initializes a new instance of the V1beta1JSONSchemaProps class.
        /// </summary>
        public V1beta1JSONSchemaProps()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1beta1JSONSchemaProps class.
        /// </summary>
        public V1beta1JSONSchemaProps(string refProperty = default(string), string schema = default(string), V1beta1JSONSchemaPropsOrBool additionalItems = default(V1beta1JSONSchemaPropsOrBool), V1beta1JSONSchemaPropsOrBool additionalProperties = default(V1beta1JSONSchemaPropsOrBool), IList<V1beta1JSONSchemaProps> allOf = default(IList<V1beta1JSONSchemaProps>), IList<V1beta1JSONSchemaProps> anyOf = default(IList<V1beta1JSONSchemaProps>), V1beta1JSON defaultProperty = default(V1beta1JSON), IDictionary<string, V1beta1JSONSchemaProps> definitions = default(IDictionary<string, V1beta1JSONSchemaProps>), IDictionary<string, V1beta1JSONSchemaPropsOrStringArray> dependencies = default(IDictionary<string, V1beta1JSONSchemaPropsOrStringArray>), string description = default(string), IList<V1beta1JSON> enumProperty = default(IList<V1beta1JSON>), V1beta1JSON example = default(V1beta1JSON), bool? exclusiveMaximum = default(bool?), bool? exclusiveMinimum = default(bool?), V1beta1ExternalDocumentation externalDocs = default(V1beta1ExternalDocumentation), string format = default(string), string id = default(string), V1beta1JSONSchemaPropsOrArray items = default(V1beta1JSONSchemaPropsOrArray), long? maxItems = default(long?), long? maxLength = default(long?), long? maxProperties = default(long?), double? maximum = default(double?), long? minItems = default(long?), long? minLength = default(long?), long? minProperties = default(long?), double? minimum = default(double?), double? multipleOf = default(double?), V1beta1JSONSchemaProps not = default(V1beta1JSONSchemaProps), IList<V1beta1JSONSchemaProps> oneOf = default(IList<V1beta1JSONSchemaProps>), string pattern = default(string), IDictionary<string, V1beta1JSONSchemaProps> patternProperties = default(IDictionary<string, V1beta1JSONSchemaProps>), IDictionary<string, V1beta1JSONSchemaProps> properties = default(IDictionary<string, V1beta1JSONSchemaProps>), IList<string> required = default(IList<string>), string title = default(string), string type = default(string), bool? uniqueItems = default(bool?))
        {
            RefProperty = refProperty;
            Schema = schema;
            AdditionalItems = additionalItems;
            AdditionalProperties = additionalProperties;
            AllOf = allOf;
            AnyOf = anyOf;
            DefaultProperty = defaultProperty;
            Definitions = definitions;
            Dependencies = dependencies;
            Description = description;
            EnumProperty = enumProperty;
            Example = example;
            ExclusiveMaximum = exclusiveMaximum;
            ExclusiveMinimum = exclusiveMinimum;
            ExternalDocs = externalDocs;
            Format = format;
            Id = id;
            Items = items;
            MaxItems = maxItems;
            MaxLength = maxLength;
            MaxProperties = maxProperties;
            Maximum = maximum;
            MinItems = minItems;
            MinLength = minLength;
            MinProperties = minProperties;
            Minimum = minimum;
            MultipleOf = multipleOf;
            Not = not;
            OneOf = oneOf;
            Pattern = pattern;
            PatternProperties = patternProperties;
            Properties = properties;
            Required = required;
            Title = title;
            Type = type;
            UniqueItems = uniqueItems;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "$ref")]
        public string RefProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "$schema")]
        public string Schema { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "additionalItems")]
        public V1beta1JSONSchemaPropsOrBool AdditionalItems { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "additionalProperties")]
        public V1beta1JSONSchemaPropsOrBool AdditionalProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "allOf")]
        public IList<V1beta1JSONSchemaProps> AllOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "anyOf")]
        public IList<V1beta1JSONSchemaProps> AnyOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "default")]
        public V1beta1JSON DefaultProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "definitions")]
        public IDictionary<string, V1beta1JSONSchemaProps> Definitions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dependencies")]
        public IDictionary<string, V1beta1JSONSchemaPropsOrStringArray> Dependencies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "enum")]
        public IList<V1beta1JSON> EnumProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "example")]
        public V1beta1JSON Example { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exclusiveMaximum")]
        public bool? ExclusiveMaximum { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "exclusiveMinimum")]
        public bool? ExclusiveMinimum { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "externalDocs")]
        public V1beta1ExternalDocumentation ExternalDocs { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "format")]
        public string Format { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public V1beta1JSONSchemaPropsOrArray Items { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxItems")]
        public long? MaxItems { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxLength")]
        public long? MaxLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maxProperties")]
        public long? MaxProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "maximum")]
        public double? Maximum { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "minItems")]
        public long? MinItems { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "minLength")]
        public long? MinLength { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "minProperties")]
        public long? MinProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "minimum")]
        public double? Minimum { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "multipleOf")]
        public double? MultipleOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "not")]
        public V1beta1JSONSchemaProps Not { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "oneOf")]
        public IList<V1beta1JSONSchemaProps> OneOf { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "patternProperties")]
        public IDictionary<string, V1beta1JSONSchemaProps> PatternProperties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, V1beta1JSONSchemaProps> Properties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "required")]
        public IList<string> Required { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uniqueItems")]
        public bool? UniqueItems { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AdditionalItems != null)
            {
                AdditionalItems.Validate();
            }
            if (AdditionalProperties != null)
            {
                AdditionalProperties.Validate();
            }
            if (AllOf != null)
            {
                foreach (var element in AllOf)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (AnyOf != null)
            {
                foreach (var element1 in AnyOf)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (DefaultProperty != null)
            {
                DefaultProperty.Validate();
            }
            if (Definitions != null)
            {
                foreach (var valueElement in Definitions.Values)
                {
                    if (valueElement != null)
                    {
                        valueElement.Validate();
                    }
                }
            }
            if (Dependencies != null)
            {
                foreach (var valueElement1 in Dependencies.Values)
                {
                    if (valueElement1 != null)
                    {
                        valueElement1.Validate();
                    }
                }
            }
            if (EnumProperty != null)
            {
                foreach (var element2 in EnumProperty)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (Example != null)
            {
                Example.Validate();
            }
            if (Items != null)
            {
                Items.Validate();
            }
            if (Not != null)
            {
                Not.Validate();
            }
            if (OneOf != null)
            {
                foreach (var element3 in OneOf)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (PatternProperties != null)
            {
                foreach (var valueElement2 in PatternProperties.Values)
                {
                    if (valueElement2 != null)
                    {
                        valueElement2.Validate();
                    }
                }
            }
            if (Properties != null)
            {
                foreach (var valueElement3 in Properties.Values)
                {
                    if (valueElement3 != null)
                    {
                        valueElement3.Validate();
                    }
                }
            }
        }
    }
}
