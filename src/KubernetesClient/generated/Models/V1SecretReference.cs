// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// SecretReference represents a Secret Reference. It has enough information to
        /// retrieve secret in any namespace
    /// </summary>
    public partial class V1SecretReference
    {
        /// <summary>
        /// Initializes a new instance of the V1SecretReference class.
        /// </summary>
        public V1SecretReference()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1SecretReference class.
        /// </summary>
        /// <param name="name">
        /// Name is unique within a namespace to reference a secret resource.
        /// </param>
        /// <param name="namespaceProperty">
        /// Namespace defines the space within which the secret name must be unique.
        /// </param>
        public V1SecretReference(string name = null, string namespaceProperty = null)
        {
            Name = name;
            NamespaceProperty = namespaceProperty;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Name is unique within a namespace to reference a secret resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Namespace defines the space within which the secret name must be unique.
        /// </summary>
        [JsonProperty(PropertyName = "namespace")]
        public string NamespaceProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
