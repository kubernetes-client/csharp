// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// A topology selector term represents the result of label queries. A null or empty
        /// topology selector term matches no objects. The requirements of them are ANDed.
        /// It provides a subset of functionality as NodeSelectorTerm. This is an alpha
        /// feature and may change in the future.
    /// </summary>
    public partial class V1TopologySelectorTerm
    {
        /// <summary>
        /// Initializes a new instance of the V1TopologySelectorTerm class.
        /// </summary>
        public V1TopologySelectorTerm()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1TopologySelectorTerm class.
        /// </summary>
        /// <param name="matchLabelExpressions">
        /// A list of topology selector requirements by labels.
        /// </param>
        public V1TopologySelectorTerm(IList<V1TopologySelectorLabelRequirement> matchLabelExpressions = null)
        {
            MatchLabelExpressions = matchLabelExpressions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// A list of topology selector requirements by labels.
        /// </summary>
        [JsonProperty(PropertyName = "matchLabelExpressions")]
        public IList<V1TopologySelectorLabelRequirement> MatchLabelExpressions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            foreach(var obj in MatchLabelExpressions)
            {
                obj.Validate();
            }
        }
    }
}
