// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// Secret holds secret data of a certain type. The total bytes of the values in the
        /// Data field must be less than MaxSecretSize bytes.
    /// </summary>
    public partial class V1Secret
    {
        /// <summary>
        /// Initializes a new instance of the V1Secret class.
        /// </summary>
        public V1Secret()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1Secret class.
        /// </summary>
        /// <param name="apiVersion">
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </param>
        /// <param name="data">
        /// Data contains the secret data. Each key must consist of alphanumeric characters,
        /// &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. The serialized form of the secret data is a base64 encoded
        /// string, representing the arbitrary (possibly non-string) data value here.
        /// Described in https://tools.ietf.org/html/rfc4648#section-4
        /// </param>
        /// <param name="immutable">
        /// Immutable, if set to true, ensures that data stored in the Secret cannot be
        /// updated (only object metadata can be modified). If not set to true, the field
        /// can be modified at any time. Defaulted to nil.
        /// </param>
        /// <param name="kind">
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </param>
        /// <param name="metadata">
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </param>
        /// <param name="stringData">
        /// stringData allows specifying non-binary secret data in string form. It is
        /// provided as a write-only input field for convenience. All keys and values are
        /// merged into the data field on write, overwriting any existing values. The
        /// stringData field is never output when reading from the API.
        /// </param>
        /// <param name="type">
        /// Used to facilitate programmatic handling of secret data. More info:
        /// https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
        /// </param>
        public V1Secret(string apiVersion = null, IDictionary<string, byte[]> data = null, bool? immutable = null, string kind = null, V1ObjectMeta metadata = null, IDictionary<string, string> stringData = null, string type = null)
        {
            ApiVersion = apiVersion;
            Data = data;
            Immutable = immutable;
            Kind = kind;
            Metadata = metadata;
            StringData = stringData;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// APIVersion defines the versioned schema of this representation of an object.
        /// Servers should convert recognized schemas to the latest internal value, and may
        /// reject unrecognized values. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        /// </summary>
        [JsonPropertyName("apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Data contains the secret data. Each key must consist of alphanumeric characters,
        /// &apos;-&apos;, &apos;_&apos; or &apos;.&apos;. The serialized form of the secret data is a base64 encoded
        /// string, representing the arbitrary (possibly non-string) data value here.
        /// Described in https://tools.ietf.org/html/rfc4648#section-4
        /// </summary>
        [JsonPropertyName("data")]
        public IDictionary<string, byte[]> Data { get; set; }

        /// <summary>
        /// Immutable, if set to true, ensures that data stored in the Secret cannot be
        /// updated (only object metadata can be modified). If not set to true, the field
        /// can be modified at any time. Defaulted to nil.
        /// </summary>
        [JsonPropertyName("immutable")]
        public bool? Immutable { get; set; }

        /// <summary>
        /// Kind is a string value representing the REST resource this object represents.
        /// Servers may infer this from the endpoint the client submits requests to. Cannot
        /// be updated. In CamelCase. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        /// </summary>
        [JsonPropertyName("kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Standard object&apos;s metadata. More info:
        /// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public V1ObjectMeta Metadata { get; set; }

        /// <summary>
        /// stringData allows specifying non-binary secret data in string form. It is
        /// provided as a write-only input field for convenience. All keys and values are
        /// merged into the data field on write, overwriting any existing values. The
        /// stringData field is never output when reading from the API.
        /// </summary>
        [JsonPropertyName("stringData")]
        public IDictionary<string, string> StringData { get; set; }

        /// <summary>
        /// Used to facilitate programmatic handling of secret data. More info:
        /// https://kubernetes.io/docs/concepts/configuration/secret/#secret-types
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            Metadata?.Validate();
        }
    }
}
