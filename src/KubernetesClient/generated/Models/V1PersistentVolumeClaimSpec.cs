// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// PersistentVolumeClaimSpec describes the common attributes of storage devices and
        /// allows a Source for provider-specific attributes
    /// </summary>
    public partial class V1PersistentVolumeClaimSpec
    {
        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeClaimSpec class.
        /// </summary>
        public V1PersistentVolumeClaimSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1PersistentVolumeClaimSpec class.
        /// </summary>
        /// <param name="accessModes">
        /// AccessModes contains the desired access modes the volume should have. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </param>
        /// <param name="dataSource">
        /// This field can be used to specify either: * An existing VolumeSnapshot object
        /// (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
        /// (PersistentVolumeClaim) If the provisioner or an external controller can support
        /// the specified data source, it will create a new volume based on the contents of
        /// the specified data source. If the AnyVolumeDataSource feature gate is enabled,
        /// this field will always have the same contents as the DataSourceRef field.
        /// </param>
        /// <param name="dataSourceRef">
        /// Specifies the object from which to populate the volume with data, if a non-empty
        /// volume is desired. This may be any local object from a non-empty API group (non
        /// core object) or a PersistentVolumeClaim object. When this field is specified,
        /// volume binding will only succeed if the type of the specified object matches
        /// some installed volume populator or dynamic provisioner. This field will replace
        /// the functionality of the DataSource field and as such if both fields are
        /// non-empty, they must have the same value. For backwards compatibility, both
        /// fields (DataSource and DataSourceRef) will be set to the same value
        /// automatically if one of them is empty and the other is non-empty. There are two
        /// important differences between DataSource and DataSourceRef: * While DataSource
        /// only allows two specific types of objects, DataSourceRef
        /// allows any non-core object, as well as PersistentVolumeClaim objects.
        /// * While DataSource ignores disallowed values (dropping them), DataSourceRef
        /// preserves all values, and generates an error if a disallowed value is
        /// specified.
        /// (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be
        /// enabled.
        /// </param>
        /// <param name="resources">
        /// Resources represents the minimum resources the volume should have. If
        /// RecoverVolumeExpansionFailure feature is enabled users are allowed to specify
        /// resource requirements that are lower than previous value but must still be
        /// higher than capacity recorded in the status field of the claim. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </param>
        /// <param name="selector">
        /// A label query over volumes to consider for binding.
        /// </param>
        /// <param name="storageClassName">
        /// Name of the StorageClass required by the claim. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </param>
        /// <param name="volumeMode">
        /// volumeMode defines what type of volume is required by the claim. Value of
        /// Filesystem is implied when not included in claim spec.
        /// </param>
        /// <param name="volumeName">
        /// VolumeName is the binding reference to the PersistentVolume backing this claim.
        /// </param>
        public V1PersistentVolumeClaimSpec(IList<string> accessModes = null, V1TypedLocalObjectReference dataSource = null, V1TypedLocalObjectReference dataSourceRef = null, V1ResourceRequirements resources = null, V1LabelSelector selector = null, string storageClassName = null, string volumeMode = null, string volumeName = null)
        {
            AccessModes = accessModes;
            DataSource = dataSource;
            DataSourceRef = dataSourceRef;
            Resources = resources;
            Selector = selector;
            StorageClassName = storageClassName;
            VolumeMode = volumeMode;
            VolumeName = volumeName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// AccessModes contains the desired access modes the volume should have. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        [JsonPropertyName("accessModes")]
        public IList<string> AccessModes { get; set; }

        /// <summary>
        /// This field can be used to specify either: * An existing VolumeSnapshot object
        /// (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC
        /// (PersistentVolumeClaim) If the provisioner or an external controller can support
        /// the specified data source, it will create a new volume based on the contents of
        /// the specified data source. If the AnyVolumeDataSource feature gate is enabled,
        /// this field will always have the same contents as the DataSourceRef field.
        /// </summary>
        [JsonPropertyName("dataSource")]
        public V1TypedLocalObjectReference DataSource { get; set; }

        /// <summary>
        /// Specifies the object from which to populate the volume with data, if a non-empty
        /// volume is desired. This may be any local object from a non-empty API group (non
        /// core object) or a PersistentVolumeClaim object. When this field is specified,
        /// volume binding will only succeed if the type of the specified object matches
        /// some installed volume populator or dynamic provisioner. This field will replace
        /// the functionality of the DataSource field and as such if both fields are
        /// non-empty, they must have the same value. For backwards compatibility, both
        /// fields (DataSource and DataSourceRef) will be set to the same value
        /// automatically if one of them is empty and the other is non-empty. There are two
        /// important differences between DataSource and DataSourceRef: * While DataSource
        /// only allows two specific types of objects, DataSourceRef
        /// allows any non-core object, as well as PersistentVolumeClaim objects.
        /// * While DataSource ignores disallowed values (dropping them), DataSourceRef
        /// preserves all values, and generates an error if a disallowed value is
        /// specified.
        /// (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be
        /// enabled.
        /// </summary>
        [JsonPropertyName("dataSourceRef")]
        public V1TypedLocalObjectReference DataSourceRef { get; set; }

        /// <summary>
        /// Resources represents the minimum resources the volume should have. If
        /// RecoverVolumeExpansionFailure feature is enabled users are allowed to specify
        /// resource requirements that are lower than previous value but must still be
        /// higher than capacity recorded in the status field of the claim. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        [JsonPropertyName("resources")]
        public V1ResourceRequirements Resources { get; set; }

        /// <summary>
        /// A label query over volumes to consider for binding.
        /// </summary>
        [JsonPropertyName("selector")]
        public V1LabelSelector Selector { get; set; }

        /// <summary>
        /// Name of the StorageClass required by the claim. More info:
        /// https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </summary>
        [JsonPropertyName("storageClassName")]
        public string StorageClassName { get; set; }

        /// <summary>
        /// volumeMode defines what type of volume is required by the claim. Value of
        /// Filesystem is implied when not included in claim spec.
        /// </summary>
        [JsonPropertyName("volumeMode")]
        public string VolumeMode { get; set; }

        /// <summary>
        /// VolumeName is the binding reference to the PersistentVolume backing this claim.
        /// </summary>
        [JsonPropertyName("volumeName")]
        public string VolumeName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            DataSource?.Validate();
            DataSourceRef?.Validate();
            Resources?.Validate();
            Selector?.Validate();
        }
    }
}
