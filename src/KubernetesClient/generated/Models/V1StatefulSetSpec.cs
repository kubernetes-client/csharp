// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// A StatefulSetSpec is the specification of a StatefulSet.
    /// </summary>
    public partial class V1StatefulSetSpec
    {
        /// <summary>
        /// Initializes a new instance of the V1StatefulSetSpec class.
        /// </summary>
        public V1StatefulSetSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1StatefulSetSpec class.
        /// </summary>
        /// <param name="selector">
        /// selector is a label query over pods that should match the replica count. It must
        /// match the pod template&apos;s labels. More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        /// </param>
        /// <param name="serviceName">
        /// serviceName is the name of the service that governs this StatefulSet. This
        /// service must exist before the StatefulSet, and is responsible for the network
        /// identity of the set. Pods get DNS/hostnames that follow the pattern:
        /// pod-specific-string.serviceName.default.svc.cluster.local where
        /// &quot;pod-specific-string&quot; is managed by the StatefulSet controller.
        /// </param>
        /// <param name="template">
        /// template is the object that describes the pod that will be created if
        /// insufficient replicas are detected. Each pod stamped out by the StatefulSet will
        /// fulfill this Template, but have a unique identity from the rest of the
        /// StatefulSet.
        /// </param>
        /// <param name="minReadySeconds">
        /// Minimum number of seconds for which a newly created pod should be ready without
        /// any of its container crashing for it to be considered available. Defaults to 0
        /// (pod will be considered available as soon as it is ready) This is an alpha field
        /// and requires enabling StatefulSetMinReadySeconds feature gate.
        /// </param>
        /// <param name="persistentVolumeClaimRetentionPolicy">
        /// persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent
        /// volume claims created from volumeClaimTemplates. By default, all persistent
        /// volume claims are created as needed and retained until manually deleted. This
        /// policy allows the lifecycle to be altered, for example by deleting persistent
        /// volume claims when their stateful set is deleted, or when their pod is scaled
        /// down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled,
        /// which is alpha.  +optional
        /// </param>
        /// <param name="podManagementPolicy">
        /// podManagementPolicy controls how pods are created during initial scale up, when
        /// replacing pods on nodes, or when scaling down. The default policy is
        /// `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1,
        /// etc) and the controller will wait until each pod is ready before continuing.
        /// When scaling down, the pods are removed in the opposite order. The alternative
        /// policy is `Parallel` which will create pods in parallel to match the desired
        /// scale without waiting, and on scale down will delete all pods at once.
        /// 
        /// Possible enum values:
        /// - `&quot;OrderedReady&quot;` will create pods in strictly increasing order on scale up and
        /// strictly decreasing order on scale down, progressing only when the previous pod
        /// is ready or terminated. At most one pod will be changed at any time.
        /// - `&quot;Parallel&quot;` will create and delete pods as soon as the stateful set replica
        /// count is changed, and will not wait for pods to be ready or complete
        /// termination.
        /// </param>
        /// <param name="replicas">
        /// replicas is the desired number of replicas of the given Template. These are
        /// replicas in the sense that they are instantiations of the same Template, but
        /// individual replicas also have a consistent identity. If unspecified, defaults to
        /// 1.
        /// </param>
        /// <param name="revisionHistoryLimit">
        /// revisionHistoryLimit is the maximum number of revisions that will be maintained
        /// in the StatefulSet&apos;s revision history. The revision history consists of all
        /// revisions not represented by a currently applied StatefulSetSpec version. The
        /// default value is 10.
        /// </param>
        /// <param name="updateStrategy">
        /// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to
        /// update Pods in the StatefulSet when a revision is made to Template.
        /// </param>
        /// <param name="volumeClaimTemplates">
        /// volumeClaimTemplates is a list of claims that pods are allowed to reference. The
        /// StatefulSet controller is responsible for mapping network identities to claims
        /// in a way that maintains the identity of a pod. Every claim in this list must
        /// have at least one matching (by name) volumeMount in one container in the
        /// template. A claim in this list takes precedence over any volumes in the
        /// template, with the same name.
        /// </param>
        public V1StatefulSetSpec(V1LabelSelector selector, string serviceName, V1PodTemplateSpec template, int? minReadySeconds = null, V1StatefulSetPersistentVolumeClaimRetentionPolicy persistentVolumeClaimRetentionPolicy = null, string podManagementPolicy = null, int? replicas = null, int? revisionHistoryLimit = null, V1StatefulSetUpdateStrategy updateStrategy = null, IList<V1PersistentVolumeClaim> volumeClaimTemplates = null)
        {
            MinReadySeconds = minReadySeconds;
            PersistentVolumeClaimRetentionPolicy = persistentVolumeClaimRetentionPolicy;
            PodManagementPolicy = podManagementPolicy;
            Replicas = replicas;
            RevisionHistoryLimit = revisionHistoryLimit;
            Selector = selector;
            ServiceName = serviceName;
            Template = template;
            UpdateStrategy = updateStrategy;
            VolumeClaimTemplates = volumeClaimTemplates;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Minimum number of seconds for which a newly created pod should be ready without
        /// any of its container crashing for it to be considered available. Defaults to 0
        /// (pod will be considered available as soon as it is ready) This is an alpha field
        /// and requires enabling StatefulSetMinReadySeconds feature gate.
        /// </summary>
        [JsonPropertyName("minReadySeconds")]
        public int? MinReadySeconds { get; set; }

        /// <summary>
        /// persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent
        /// volume claims created from volumeClaimTemplates. By default, all persistent
        /// volume claims are created as needed and retained until manually deleted. This
        /// policy allows the lifecycle to be altered, for example by deleting persistent
        /// volume claims when their stateful set is deleted, or when their pod is scaled
        /// down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled,
        /// which is alpha.  +optional
        /// </summary>
        [JsonPropertyName("persistentVolumeClaimRetentionPolicy")]
        public V1StatefulSetPersistentVolumeClaimRetentionPolicy PersistentVolumeClaimRetentionPolicy { get; set; }

        /// <summary>
        /// podManagementPolicy controls how pods are created during initial scale up, when
        /// replacing pods on nodes, or when scaling down. The default policy is
        /// `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1,
        /// etc) and the controller will wait until each pod is ready before continuing.
        /// When scaling down, the pods are removed in the opposite order. The alternative
        /// policy is `Parallel` which will create pods in parallel to match the desired
        /// scale without waiting, and on scale down will delete all pods at once.
        /// 
        /// Possible enum values:
        /// - `&quot;OrderedReady&quot;` will create pods in strictly increasing order on scale up and
        /// strictly decreasing order on scale down, progressing only when the previous pod
        /// is ready or terminated. At most one pod will be changed at any time.
        /// - `&quot;Parallel&quot;` will create and delete pods as soon as the stateful set replica
        /// count is changed, and will not wait for pods to be ready or complete
        /// termination.
        /// </summary>
        [JsonPropertyName("podManagementPolicy")]
        public string PodManagementPolicy { get; set; }

        /// <summary>
        /// replicas is the desired number of replicas of the given Template. These are
        /// replicas in the sense that they are instantiations of the same Template, but
        /// individual replicas also have a consistent identity. If unspecified, defaults to
        /// 1.
        /// </summary>
        [JsonPropertyName("replicas")]
        public int? Replicas { get; set; }

        /// <summary>
        /// revisionHistoryLimit is the maximum number of revisions that will be maintained
        /// in the StatefulSet&apos;s revision history. The revision history consists of all
        /// revisions not represented by a currently applied StatefulSetSpec version. The
        /// default value is 10.
        /// </summary>
        [JsonPropertyName("revisionHistoryLimit")]
        public int? RevisionHistoryLimit { get; set; }

        /// <summary>
        /// selector is a label query over pods that should match the replica count. It must
        /// match the pod template&apos;s labels. More info:
        /// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        /// </summary>
        [JsonPropertyName("selector")]
        public V1LabelSelector Selector { get; set; }

        /// <summary>
        /// serviceName is the name of the service that governs this StatefulSet. This
        /// service must exist before the StatefulSet, and is responsible for the network
        /// identity of the set. Pods get DNS/hostnames that follow the pattern:
        /// pod-specific-string.serviceName.default.svc.cluster.local where
        /// &quot;pod-specific-string&quot; is managed by the StatefulSet controller.
        /// </summary>
        [JsonPropertyName("serviceName")]
        public string ServiceName { get; set; }

        /// <summary>
        /// template is the object that describes the pod that will be created if
        /// insufficient replicas are detected. Each pod stamped out by the StatefulSet will
        /// fulfill this Template, but have a unique identity from the rest of the
        /// StatefulSet.
        /// </summary>
        [JsonPropertyName("template")]
        public V1PodTemplateSpec Template { get; set; }

        /// <summary>
        /// updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to
        /// update Pods in the StatefulSet when a revision is made to Template.
        /// </summary>
        [JsonPropertyName("updateStrategy")]
        public V1StatefulSetUpdateStrategy UpdateStrategy { get; set; }

        /// <summary>
        /// volumeClaimTemplates is a list of claims that pods are allowed to reference. The
        /// StatefulSet controller is responsible for mapping network identities to claims
        /// in a way that maintains the identity of a pod. Every claim in this list must
        /// have at least one matching (by name) volumeMount in one container in the
        /// template. A claim in this list takes precedence over any volumes in the
        /// template, with the same name.
        /// </summary>
        [JsonPropertyName("volumeClaimTemplates")]
        public IList<V1PersistentVolumeClaim> VolumeClaimTemplates { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Selector == null)
            {
                throw new ArgumentNullException("Selector");    
            }
            if (Template == null)
            {
                throw new ArgumentNullException("Template");    
            }
            PersistentVolumeClaimRetentionPolicy?.Validate();
            Selector?.Validate();
            Template?.Validate();
            UpdateStrategy?.Validate();
            if (VolumeClaimTemplates != null){
                foreach(var obj in VolumeClaimTemplates)
                {
                    obj.Validate();
                }
            }
        }
    }
}
