// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    /// <summary>
    /// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be
        /// mounted as read/write once. ISCSI volumes support ownership management and
        /// SELinux relabeling.
    /// </summary>
    public partial class V1ISCSIPersistentVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1ISCSIPersistentVolumeSource class.
        /// </summary>
        public V1ISCSIPersistentVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ISCSIPersistentVolumeSource class.
        /// </summary>
        /// <param name="iqn">
        /// Target iSCSI Qualified Name.
        /// </param>
        /// <param name="lun">
        /// iSCSI Target Lun number.
        /// </param>
        /// <param name="targetPortal">
        /// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is
        /// other than default (typically TCP ports 860 and 3260).
        /// </param>
        /// <param name="chapAuthDiscovery">
        /// whether support iSCSI Discovery CHAP authentication
        /// </param>
        /// <param name="chapAuthSession">
        /// whether support iSCSI Session CHAP authentication
        /// </param>
        /// <param name="fsType">
        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the
        /// filesystem type is supported by the host operating system. Examples: &quot;ext4&quot;,
        /// &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        /// </param>
        /// <param name="initiatorName">
        /// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface
        /// simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be
        /// created for the connection.
        /// </param>
        /// <param name="iscsiInterface">
        /// iSCSI Interface Name that uses an iSCSI transport. Defaults to &apos;default&apos; (tcp).
        /// </param>
        /// <param name="portals">
        /// iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port
        /// is other than default (typically TCP ports 860 and 3260).
        /// </param>
        /// <param name="readOnlyProperty">
        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
        /// false.
        /// </param>
        /// <param name="secretRef">
        /// CHAP Secret for iSCSI target and initiator authentication
        /// </param>
        public V1ISCSIPersistentVolumeSource(string iqn, int lun, string targetPortal, bool? chapAuthDiscovery = null, bool? chapAuthSession = null, string fsType = null, string initiatorName = null, string iscsiInterface = null, IList<string> portals = null, bool? readOnlyProperty = null, V1SecretReference secretRef = null)
        {
            ChapAuthDiscovery = chapAuthDiscovery;
            ChapAuthSession = chapAuthSession;
            FsType = fsType;
            InitiatorName = initiatorName;
            Iqn = iqn;
            IscsiInterface = iscsiInterface;
            Lun = lun;
            Portals = portals;
            ReadOnlyProperty = readOnlyProperty;
            SecretRef = secretRef;
            TargetPortal = targetPortal;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// whether support iSCSI Discovery CHAP authentication
        /// </summary>
        [JsonPropertyName("chapAuthDiscovery")]
        public bool? ChapAuthDiscovery { get; set; }

        /// <summary>
        /// whether support iSCSI Session CHAP authentication
        /// </summary>
        [JsonPropertyName("chapAuthSession")]
        public bool? ChapAuthSession { get; set; }

        /// <summary>
        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the
        /// filesystem type is supported by the host operating system. Examples: &quot;ext4&quot;,
        /// &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if unspecified. More info:
        /// https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        /// </summary>
        [JsonPropertyName("fsType")]
        public string FsType { get; set; }

        /// <summary>
        /// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface
        /// simultaneously, new iSCSI interface &lt;target portal&gt;:&lt;volume name&gt; will be
        /// created for the connection.
        /// </summary>
        [JsonPropertyName("initiatorName")]
        public string InitiatorName { get; set; }

        /// <summary>
        /// Target iSCSI Qualified Name.
        /// </summary>
        [JsonPropertyName("iqn")]
        public string Iqn { get; set; }

        /// <summary>
        /// iSCSI Interface Name that uses an iSCSI transport. Defaults to &apos;default&apos; (tcp).
        /// </summary>
        [JsonPropertyName("iscsiInterface")]
        public string IscsiInterface { get; set; }

        /// <summary>
        /// iSCSI Target Lun number.
        /// </summary>
        [JsonPropertyName("lun")]
        public int Lun { get; set; }

        /// <summary>
        /// iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port
        /// is other than default (typically TCP ports 860 and 3260).
        /// </summary>
        [JsonPropertyName("portals")]
        public IList<string> Portals { get; set; }

        /// <summary>
        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to
        /// false.
        /// </summary>
        [JsonPropertyName("readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// CHAP Secret for iSCSI target and initiator authentication
        /// </summary>
        [JsonPropertyName("secretRef")]
        public V1SecretReference SecretRef { get; set; }

        /// <summary>
        /// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is
        /// other than default (typically TCP ports 860 and 3260).
        /// </summary>
        [JsonPropertyName("targetPortal")]
        public string TargetPortal { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            SecretRef?.Validate();
        }
    }
}
