// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// Represents a StorageOS persistent volume resource.
    /// </summary>
    public partial class V1StorageOSPersistentVolumeSource
    {
        /// <summary>
        /// Initializes a new instance of the V1StorageOSPersistentVolumeSource class.
        /// </summary>
        public V1StorageOSPersistentVolumeSource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1StorageOSPersistentVolumeSource class.
        /// </summary>
        /// <param name="fsType">
        /// Filesystem type to mount. Must be a filesystem type supported by the host
        /// operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if
        /// unspecified.
        /// </param>
        /// <param name="readOnlyProperty">
        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
        /// VolumeMounts.
        /// </param>
        /// <param name="secretRef">
        /// SecretRef specifies the secret to use for obtaining the StorageOS API
        /// credentials.  If not specified, default values will be attempted.
        /// </param>
        /// <param name="volumeName">
        /// VolumeName is the human-readable name of the StorageOS volume.  Volume names are
        /// only unique within a namespace.
        /// </param>
        /// <param name="volumeNamespace">
        /// VolumeNamespace specifies the scope of the volume within StorageOS.  If no
        /// namespace is specified then the Pod&apos;s namespace will be used.  This allows the
        /// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
        /// Set VolumeName to any name to override the default behaviour. Set to &quot;default&quot;
        /// if you are not using namespaces within StorageOS. Namespaces that do not
        /// pre-exist within StorageOS will be created.
        /// </param>
        public V1StorageOSPersistentVolumeSource(string fsType = null, bool? readOnlyProperty = null, V1ObjectReference secretRef = null, string volumeName = null, string volumeNamespace = null)
        {
            FsType = fsType;
            ReadOnlyProperty = readOnlyProperty;
            SecretRef = secretRef;
            VolumeName = volumeName;
            VolumeNamespace = volumeNamespace;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by the host
        /// operating system. Ex. &quot;ext4&quot;, &quot;xfs&quot;, &quot;ntfs&quot;. Implicitly inferred to be &quot;ext4&quot; if
        /// unspecified.
        /// </summary>
        [JsonProperty(PropertyName = "fsType")]
        public string FsType { get; set; }

        /// <summary>
        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in
        /// VolumeMounts.
        /// </summary>
        [JsonProperty(PropertyName = "readOnly")]
        public bool? ReadOnlyProperty { get; set; }

        /// <summary>
        /// SecretRef specifies the secret to use for obtaining the StorageOS API
        /// credentials.  If not specified, default values will be attempted.
        /// </summary>
        [JsonProperty(PropertyName = "secretRef")]
        public V1ObjectReference SecretRef { get; set; }

        /// <summary>
        /// VolumeName is the human-readable name of the StorageOS volume.  Volume names are
        /// only unique within a namespace.
        /// </summary>
        [JsonProperty(PropertyName = "volumeName")]
        public string VolumeName { get; set; }

        /// <summary>
        /// VolumeNamespace specifies the scope of the volume within StorageOS.  If no
        /// namespace is specified then the Pod&apos;s namespace will be used.  This allows the
        /// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
        /// Set VolumeName to any name to override the default behaviour. Set to &quot;default&quot;
        /// if you are not using namespaces within StorageOS. Namespaces that do not
        /// pre-exist within StorageOS will be created.
        /// </summary>
        [JsonProperty(PropertyName = "volumeNamespace")]
        public string VolumeNamespace { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            SecretRef?.Validate();
        }
    }
}
