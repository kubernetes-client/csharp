// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// AuditSinkSpec holds the spec for the audit sink
    /// </summary>
    public partial class V1alpha1AuditSinkSpec
    {
        /// <summary>
        /// Initializes a new instance of the V1alpha1AuditSinkSpec class.
        /// </summary>
        public V1alpha1AuditSinkSpec()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1alpha1AuditSinkSpec class.
        /// </summary>
        /// <param name="policy">Policy defines the policy for selecting which
        /// events should be sent to the webhook required</param>
        /// <param name="webhook">Webhook to send events required</param>
        public V1alpha1AuditSinkSpec(V1alpha1Policy policy, V1alpha1Webhook webhook)
        {
            Policy = policy;
            Webhook = webhook;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets policy defines the policy for selecting which events
        /// should be sent to the webhook required
        /// </summary>
        [JsonProperty(PropertyName = "policy")]
        public V1alpha1Policy Policy { get; set; }

        /// <summary>
        /// Gets or sets webhook to send events required
        /// </summary>
        [JsonProperty(PropertyName = "webhook")]
        public V1alpha1Webhook Webhook { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Policy == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Policy");
            }
            if (Webhook == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Webhook");
            }
            if (Policy != null)
            {
                Policy.Validate();
            }
            if (Webhook != null)
            {
                Webhook.Validate();
            }
        }
    }
}
