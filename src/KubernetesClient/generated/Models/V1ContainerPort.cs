// <auto-generated>
// Code generated by https://github.com/kubernetes-client/csharp/tree/master/gen/KubernetesGenerator
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace k8s.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Collections;
    using System.Linq;

    /// <summary>
    /// ContainerPort represents a network port in a single container.
    /// </summary>
    public partial class V1ContainerPort
    {
        /// <summary>
        /// Initializes a new instance of the V1ContainerPort class.
        /// </summary>
        public V1ContainerPort()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the V1ContainerPort class.
        /// </summary>
        /// <param name="containerPort">
        /// Number of port to expose on the pod&apos;s IP address. This must be a valid port
        /// number, 0 &lt; x &lt; 65536.
        /// </param>
        /// <param name="hostIP">
        /// What host IP to bind the external port to.
        /// </param>
        /// <param name="hostPort">
        /// Number of port to expose on the host. If specified, this must be a valid port
        /// number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match
        /// ContainerPort. Most containers do not need this.
        /// </param>
        /// <param name="name">
        /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
        /// named port in a pod must have a unique name. Name for the port that can be
        /// referred to by services.
        /// </param>
        /// <param name="protocol">
        /// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to &quot;TCP&quot;.
        /// </param>
        public V1ContainerPort(int containerPort, string hostIP = null, int? hostPort = null, string name = null, string protocol = null)
        {
            ContainerPort = containerPort;
            HostIP = hostIP;
            HostPort = hostPort;
            Name = name;
            Protocol = protocol;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Number of port to expose on the pod&apos;s IP address. This must be a valid port
        /// number, 0 &lt; x &lt; 65536.
        /// </summary>
        [JsonProperty(PropertyName = "containerPort")]
        public int ContainerPort { get; set; }

        /// <summary>
        /// What host IP to bind the external port to.
        /// </summary>
        [JsonProperty(PropertyName = "hostIP")]
        public string HostIP { get; set; }

        /// <summary>
        /// Number of port to expose on the host. If specified, this must be a valid port
        /// number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match
        /// ContainerPort. Most containers do not need this.
        /// </summary>
        [JsonProperty(PropertyName = "hostPort")]
        public int? HostPort { get; set; }

        /// <summary>
        /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
        /// named port in a pod must have a unique name. Name for the port that can be
        /// referred to by services.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to &quot;TCP&quot;.
        /// </summary>
        [JsonProperty(PropertyName = "protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
